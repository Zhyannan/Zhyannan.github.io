<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Jquery简明教程（二）]]></title>
    <url>%2F2016%2F08%2F05%2F2016-8-5-Jquery-02%2F</url>
    <content type="text"><![CDATA[#概述 ​ 本章会介绍jquery事件的用法，我们想要给当前元素添加事件, 只需要选中当前元素, 这里调用 click 即可, 和原生 js 不同的是: 不用’on’开头；animate的用法，以及一些动画效果；jquery三个属性操作方法，html()，val()，prop()的使用； 使用正则表达式完成表单的验证。 一. 绑定事件 给元素绑定click事件，可以用如下方法： 添加绑定事件123456789使用方法:$(&apos;#btn1&apos;).click(function()&#123; // 内部的this指的是原生对象 // 使用jquery对象用 $(this)&#125;) 例如: 123456789101112131415161718&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; var $div = $('.box') $div.click(function()&#123; console.log('haha') console.log($(this)) console.log(this) &#125;) &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt;哈哈&lt;/div&gt;&lt;/body&gt; 点击之后的结果: 获取元素的索引值 有时候需要获得匹配元素相对于其同胞元素的索引位置，此时可以用index()方法获取 12345678910111213使用方法:var $li = $(&apos;.list li&apos;).eq(1);alert( $li.index() ); // 弹出1&lt;ul class=&quot;list&quot;&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt; &lt;li&gt;6&lt;/li&gt;&lt;/ul&gt; 例如: 123456789101112131415161718&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function () &#123; var $li = $('li') $li.click(function()&#123; console.log( $(this).index() ) &#125;) &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;11&lt;/li&gt; &lt;li&gt;22&lt;/li&gt; &lt;li&gt;33&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt; 运行结果: 课堂练习 选项卡的制作 1234567891011121314151617181920212223242526272829303132333435363738&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; var $btn = $('input') var $div = $('.tab_cons div') // console.log($btn) $btn.click(function()&#123; var index = $(this).index() // console.log($btn[index]) // 给当前点击元素添加样式 $($btn[index]).addClass('active') // 给其他元素去除样式 $($btn[index]).siblings().removeClass('active') // 给当前点击元素添加样式 $($div[index]).addClass('current') // 给其他元素去除样式 $($div[index]).siblings().removeClass('current') &#125;) &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="tab_con"&gt; &lt;div class="tab_btns"&gt; &lt;input type="button" value="按钮一" class="active"&gt; &lt;input type="button" value="按钮二"&gt; &lt;input type="button" value="按钮三"&gt; &lt;/div&gt; &lt;div class="tab_cons"&gt; &lt;div class="current"&gt;按钮一对应的内容&lt;/div&gt; &lt;div&gt;按钮二对应的内容&lt;/div&gt; &lt;div&gt;按钮三对应的内容&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 或者可以写成这样: 123456789101112131415161718192021222324252627282930&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; var $btn = $('input') var $div = $('.tab_cons div') $btn.click(function()&#123; // 当前元素添加, 其他元素去除 $(this).addClass('active').siblings().removeClass('active') $div.eq( $(this).index() ).addClass('current').siblings().removeClass('current') &#125;) &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="tab_con"&gt; &lt;div class="tab_btns"&gt; &lt;input type="button" value="按钮一" class="active"&gt; &lt;input type="button" value="按钮二"&gt; &lt;input type="button" value="按钮三"&gt; &lt;/div&gt; &lt;div class="tab_cons"&gt; &lt;div class="current"&gt;按钮一对应的内容&lt;/div&gt; &lt;div&gt;按钮二对应的内容&lt;/div&gt; &lt;div&gt;按钮三对应的内容&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 总结: 我们想要给当前元素添加事件, 只需要选中当前元素, 这里调用 click 即可, 和原生 js 不同的是: 不用’on’开头 在点击事件之中,$(this) 就代表当前选中元素(jquery对象), 想要获取当前元素的索引值,可以使用 index( )方法 如果当前元素是一个dom对象, 变成 jquery 对象的方法是外边加$符号: $(dom元素) 调用 jquery对象的下标,获取的是 dom元素对象: $div[0] ===&gt; dom元素对象 二. jquery动画 通过 animate 方法可以设置元素21某属性值上的动画，可以设置一个或多个属性值，动画执行完成后会执行一个函数。 12345678910111213141516使用方法:/* animate参数： 参数一：要改变的样式属性值，写成字典的形式 参数二：动画持续的时间，单位为毫秒，一般不写单位 参数三：动画曲线，默认为‘swing’，缓冲运动，还可以设置为‘linear’，匀速运动 参数四：动画回调函数，动画完成后执行的匿名函数*/$(&apos;#div1&apos;).animate(&#123; 要改变的属性值&#125;,动画持续时间,动画的效果,function()&#123; 动画执行完成之后调用的代码&#125;); 例如: 123456789101112131415161718192021222324252627282930&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;style&gt; .box &#123; width: 100px; height: 100px; background-color: pink; &#125; &lt;/style&gt; &lt;script&gt; $(function()&#123; $('.btn').click(function()&#123; $('.box').animate(&#123; 'width':'200px' &#125;,1000,'swing',function () &#123; $('.box').animate(&#123; 'height':'200px' &#125;,1000,'swing',function()&#123; &#125;) &#125;) &#125;) &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt;&lt;/div&gt; &lt;button class="btn"&gt;按钮&lt;/button&gt;&lt;/body&gt; 最终效果: 总结: 我们使用 animate( ) 方法来设置动画 动画内部有四个参数: 要更改的元素属性, 动画时长( 以毫秒计 ), 动画曲线, 动画完成之后所做操作 我们可以使用这样的方式来做一些简单动画. 三. jquery特殊效果12345678910111213fadeIn() 淡入fadeOut() 淡出fadeToggle() 切换淡入淡出hide() 隐藏元素show() 显示元素toggle() 切换元素的可见状态slideDown() 向下展开slideUp() 向上卷起slideToggle() 依次展开或卷起某个元素使用方式: $(&apos;div&apos;).fadeIn() 例如: 12345678910111213141516171819202122&lt;head&gt; &lt;style&gt; .box &#123; width: 100px; height: 100px; background-color: pink; display:none; &#125; &lt;/style&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; $('.btn').click(function()&#123; $('.box').fadeIn() &#125;) &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;button class="btn"&gt;按钮&lt;/button&gt; &lt;div class="box"&gt;&lt;/div&gt;&lt;/body&gt; 显示效果: fadeIn()效果: fadeOut( )效果: fadeToggle( )效果: hide()效果: show()效果: toggle()效果: slideDown()效果: slideUp()效果: slideToggle()效果: 总结: jquery 帮助我们封装了一些特殊的动画效果, 我们可以直接调用这些动画效果来实现一部分常见的操作 这些动画效果的使用方式都是一样的: 1. 找到当前标签 2. 调用标签的对应动画效果 使用格式: $(获取元素).动画效果() 四. jquery链式调用 jquery 对象的方法会在执行完后返回这个 jquery 对象，所有 jquery 对象的方法可以连起来写： 1234567$(&apos;#div1&apos;) // id为div1的元素.children(&apos;ul&apos;) // 该元素下面的ul子元素.slideDown(&apos;fast&apos;) // 高度从零变到实际高度来显示ul元素.parent() // 跳到ul的父元素，也就是id为div1的元素.siblings() // 跳到div1元素平级的所有兄弟元素.children(&apos;ul&apos;) // 这些兄弟元素中的ul子元素.slideUp(&apos;fast&apos;); // 高度实际高度变换到零来隐藏ul元素 层级菜单 层级菜单 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;层级菜单&lt;/title&gt; &lt;style type="text/css"&gt; body&#123; font-family:'Microsoft Yahei'; &#125; body,ul&#123; margin:0px; padding:0px; &#125; ul&#123;list-style:none;&#125; .menu&#123; width:200px; margin:20px auto 0; &#125; .menu .level1,.menu li ul a&#123; display:block; width:200px; height:30px; line-height:30px; text-decoration:none; background-color:#3366cc; color:#fff; font-size:16px; text-indent:10px; &#125; .menu .level1&#123; border-bottom:1px solid #afc6f6; &#125; .menu li ul a&#123; font-size:14px; text-indent:20px; background-color:#7aa1ef; &#125; .menu li ul li&#123; border-bottom:1px solid #afc6f6; &#125; .menu li ul&#123; display:none; &#125; .menu li ul.current&#123; display:block; &#125; .menu li ul li a:hover&#123; background-color:#f6b544; &#125; &lt;/style&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; $(function()&#123; var $a = $('.level1') $a.click(function()&#123; $(this).next().stop().slideToggle().parent().siblings().children('ul').slideUp() &#125;) &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;ul class="menu"&gt; &lt;li&gt; &lt;a href="#" class="level1"&gt;手机&lt;/a&gt; &lt;ul class="current"&gt; &lt;li&gt;&lt;a href="#"&gt;iPhone X 256G&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;红米4A 全网通&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;HUAWEI Mate10&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;vivo X20A 4GB&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#" class="level1"&gt;笔记本&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;MacBook Pro&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;ThinkPad&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;外星人(Alienware)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;惠普(HP)薄锐ENVY&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#" class="level1"&gt;电视&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;海信(hisense)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;长虹(CHANGHONG)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;TCL彩电L65E5800A&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#" class="level1"&gt;鞋子&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;新百伦&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;adidas&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;特步&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;安踏&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#" class="level1"&gt;玩具&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;乐高&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;费雪&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;铭塔&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;贝恩斯&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 五. jquery 属性操作html ( ) 使用: html( ) 取出元素文本 或设置元素内容 作用类似于 innerHTML( ) 1234567使用方式: // 取出html内容var $htm = $(&apos;#div1&apos;).html();// 设置html内容$(&apos;#div1&apos;).html(&apos;&lt;span&gt;添加文字&lt;/span&gt;&apos;); val( ) val( ) 方法返回或设置被选元素的值。 元素的值##是通过 value 属性设置的。该方法大多用于 input 元素。 如果该方法未设置参数，则返回被选元素的当前值。 1234567使用方式:// 取出html内容var val = $(&quot;input&quot;).val();// 设置html内容$(&quot;input&quot;).val(&quot;Hello World&quot;); prop( ) 取出或设置某个属性的值 这里的属性是指标签除 css 样式以外的其他属性 12345678使用方式:// 取出图片的地址var $src = $(&apos;#img1&apos;).prop(&apos;src&apos;);// 设置图片的地址和alt属性$(&apos;#img1&apos;).prop(&#123;src: &quot;test.jpg&quot;, alt: &quot;Test Image&quot; &#125;); 12345678910111213141516171819202122232425262728293031&lt;head&gt; &lt;script src="js/jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; var $div = $('#div1'); var $a = $('#link01'); // 读取元素包裹的内容 var sTr = $div.html(); // alert(sTr); // 写入或者叫设置元素包裹的内容 $div.html('改变的文字'); $div.html('&lt;a href="http://www.baidu.com"&gt;百度网&lt;/a&gt;') $div.html('&lt;ul&gt;&lt;li&gt;列表文字&lt;/li&gt;&lt;li&gt;列表文字&lt;/li&gt;&lt;li&gt;列表文字&lt;/li&gt;&lt;/ul&gt;'); // 操作元素标签内除样式之外的其他的属性 // 读取属性值： alert( $a.prop('id') ); // 写入或者叫设置属性值 $a.prop(&#123;'href':'http://www.itcast.cn','title':'这是去到传智播客的网站的链接'&#125;); $a.html('传智播客'); &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="div1"&gt;这是一个div&lt;/div&gt; &lt;a href="#" id="link01"&gt;这是一个链接&lt;/a&gt;&lt;/body&gt; 六. jquery循环each( ) 对 jquery 选择的对象集合分别进行操作，需要用到 jquery 循环操作，此时可以用对象上的each方法： 1234使用方式: $(selector).each( function()&#123;&#125; ) 例如: 123456789101112131415161718192021222324252627282930&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; var $li = $('li') // 使用for循环写法: // var length = $li.length // for(var i = 0;i &lt; length; i++)&#123; // $li.eq(i).css(&#123;'background-color':'red'&#125;) // &#125; $li.each(function()&#123; $(this).css(&#123;'background-color':'pink'&#125;) &#125;) $li.click(function()&#123; $(this).css(&#123;'background-color':'pink'&#125;) &#125;) &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt; &lt;li&gt;6&lt;/li&gt; &lt;li&gt;7&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt; 七. jquery事件事件函数列表： 比原生 js 省略了 ‘on’ 这里涉及到一些事件冒泡的内容, 主要原理: 我们点击子元素的时候,子元素会将事件传递到父元素去,进而触发父元素的事件. 12345678910blur() 元素失去焦点focus() 元素获得焦点click() 鼠标单击mouseover() 鼠标进入（进入子元素也触发）mouseout() 鼠标离开（离开子元素也触发）mouseenter() 鼠标进入（进入子元素不触发）mouseleave() 鼠标离开（离开子元素不触发）hover() 同时为mouseenter和mouseleave事件指定处理函数ready() DOM加载完成submit() 用户递交表单 例如: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;head&gt; &lt;style&gt; .box &#123; width: 200px; height: 200px; background-color: pink; &#125; .son &#123; width: 100px; height: 100px; background-color: red; &#125; &lt;/style&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; var $input = $('#input1') // 默认,一上来就选中 $input.focus() // 取消焦点时调用的方法 $input.blur(function()&#123; // alert('haha') &#125;) var $div1 = $('.box') // mouseover和mouseout的使用 // $div1.mouseover(function()&#123; // $div1.stop().animate(&#123;'margin-top':'60px'&#125;) // &#125;) // $div1.mouseout(function()&#123; // $div1.stop().animate(&#123;'margin-top':'0px'&#125;) // &#125;) // mouseenter和mouseleave的使用 // $div1.mouseenter(function()&#123; // $div1.animate(&#123;'margin-top':'100px'&#125;) // &#125;) // $div1.mouseleave(function()&#123; // $div1.animate(&#123;'margin-top':'0px'&#125;) // &#125;) // hover的使用 $div1.hover(function()&#123; $div1.animate(&#123;'margin-top':'100px'&#125;) &#125;,function()&#123; $div1.animate(&#123;'margin':'0px'&#125;) &#125;) &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type="text" id="input1"&gt; &lt;div class="box"&gt; &lt;div class="son"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 再例如: 1234567891011121314151617181920212223242526272829&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; var $form = $('#form1') var $user = $('#name') $form.submit(function()&#123; alert($user.val()) // 阻止提交事件 return false &#125;) &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form action="" id="form1"&gt; &lt;p&gt; &lt;label for="name"&gt;姓名:&lt;/label&gt; &lt;input type="text" id="name"&gt; &lt;/p&gt; &lt;p&gt; &lt;label for="pswd"&gt;密码:&lt;/label&gt; &lt;input type="password" id="pswd"&gt; &lt;/p&gt; &lt;input type="submit"&gt; &lt;/form&gt;&lt;/body&gt; 八. 表单验证正则表达式 能让计算机读懂的字符串匹配规则。 正则表达式的写法123456789101112使用方法: // 定义一个正则表达式(两种方法)var re = new RegExp(&apos;规则&apos;, &apos;可选参数&apos;);var re = /规则/参数;// 测试正则表达式: var result = re.test(要测试的字符串)// result ---&gt; true // result ---&gt; false 规则中的字符普通字符匹配1234规则使用方式:/a/ 匹配字符 ‘a’ /a,b/ 匹配字符 ‘a,b’ 转义字符匹配1234567891011规则使用方式: \d 匹配一个数字，即0-9\D 匹配一个非数字，即除了0-9\w 匹配一个单词字符（字母、数字、下划线）\W 匹配任何非单词字符。单词字符包括：a-z、A-Z、0-9，以及下划线。\s 匹配一个空白符\S 匹配一个非空白符. 匹配一个任意字符 例如: 123456var sTr01 = '123456asdf';var re01 = /\d+/;//匹配纯数字字符串var re02 = /^\d+$/;alert(re01.test(sTr01)); //弹出truealert(re02.test(sTr01)); //弹出false 量词对左边的匹配字符定义个数123456789规则使用方式: ? 出现零次或一次（最多出现一次）+ 出现一次或多次（至少出现一次）* 出现零次或多次（任意次）&#123;n&#125; 出现n次&#123;n,m&#125; 出现n到m次&#123;n,&#125; 至少出现n次 任意一个或者范围123[abc123] : 匹配‘abc123’中的任意一个字符[a-z0-9] : 匹配a到z或者0到9中的任意一个字符 限制开头结尾123^ 以紧挨的元素开头$ 以紧挨的元素结尾 修饰参数123g： global: 全文搜索，默认搜索到第一个结果接停止i： ingore case: 忽略大小写，默认大小写敏感 常用函数 test12345使用方法: 正则.test(字符串) // 匹配成功，就返回真，否则就返回假 正则默认规则匹配成功就结束，不会继续匹配，区分大小写 常用正则规则1234567891011// 用户名验证：(数字字母或下划线6到20位)var reUser = /^\w&#123;6,20&#125;$/;// 邮箱验证： var reMail = /^[a-z0-9][\w\.\-]*@[a-z0-9\-]+(\.[a-z]&#123;2,5&#125;)&#123;1,2&#125;$/i;// 密码验证：var rePass = /^[\w!@#$%^&amp;*]&#123;6,20&#125;$/;// 手机号码验证：var rePhone = /^1[34578]\d&#123;9&#125;$/; 例如: 1234567891011&lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt;&lt;script&gt; // var str = 'helloA world' // var reg = /a/i var str = 'a123ab' var reg = /^\d/ var result = reg.test(str) alert(result)&lt;/script&gt;]]></content>
      <categories>
        <category>前端 - jquery</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>jquery</tag>
        <tag>jquery事件</tag>
        <tag>jquery动画</tag>
        <tag>jquery正则</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jquery简明教程（一）]]></title>
    <url>%2F2016%2F08%2F02%2F2016-8-2-Jquery-01%2F</url>
    <content type="text"><![CDATA[概述 jQuery 是目前使用最广泛的 javascript 函数库。据统计，全世界排名前100万的网站，有46%使用 jQuery，远远超过其他库。微软公司甚至把 jQuery 作为他们的官方库。 jQuery的版本分为1.x系列和2.x、3.x系列，1.x系列兼容低版本的浏览器，2.x、3.x系列放弃支持低版本浏览器，目前使用最多的是1.x系列的。 一、导入jqueryjquery是一个函数库，一个js文件，页面用 script 标签引入这个js文件就可以使用。 1&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.12.2.js&quot;&gt;&lt;/script&gt; jquery的口号和愿望 Write Less, Do More（写得少，做得多） 1、http://jquery.com/ 官方网站2、https://code.jquery.com/ 版本下载 二. 使用 jquery 加载代码不适用 jquery我们不适用 jquery 时导入文件的方式: 1234567891011&lt;head&gt; &lt;script&gt; window.onload = function () &#123; var oDiv = document.getElementById('app') oDiv.innerHTML = 'hello world' &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt;&lt;/body&gt; 使用 jquery 将获取元素的语句写到页面头部，会因为元素还没有加载而出错，jquery提供了ready方法解决这个问题，它的速度比原生的 window.onload 更快。 12345使用格式:$(document).ready(function()&#123; ...&#125;) 例如: 123456789101112&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(document).ready(function()&#123; var $div = $('#app') $div.html('hello world') &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt;&lt;/body&gt; 可以简写为： 12345使用格式:$(function()&#123; ...&#125;) 123456789101112&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; var $div = $('#app') $div.html('hello world') &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt;&lt;/body&gt; 总结: 使用 jquery 能够简化我们书写的代码 jquery 的 ready 调用方法比我们之前接触的 window.onload 方法调用的要早: ready 是html加载完毕之后就调用, onload是在资源文件也加载完毕之后才调用. jquery 的 ready 有简略写法, 我们往往使用它的简略写法. 三. jquery选择器jquery使用思想先, 选择某个网页元素，然后, 对它进行某种操作 jquery选择器 jquery 选择器可以快速地选择元素，选择规则和 css 样式相同，使用 length 属性判断是否选择成功。 12345$(&apos;#myId&apos;) // 选择id为myId的网页元素$(&apos;.myClass&apos;) // 选择class为myClass的元素$(&apos;li&apos;) // 选择所有的li元素$(&apos;#ul1 li span&apos;) // 选择id为为ul1元素下的所有li下的span元素$(&apos;input[name=&quot;first&quot;]&apos;) // 选择name属性等于first的input元素 例如: 1234567891011121314151617181920212223242526272829303132333435&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; var $div = $('#app') $div.html('hello!!') var $div1 = $('.box') $div1.html('box登场') var $div2 = $('#divbox') $div2.html('会不会把p标签给替换掉?') var $span = $('ul li p span') $span.html('强调强调强调') var $a = $('a[href="www"]') $a.html('a标签修改的文字') &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="app"&gt;nihao&lt;/div&gt; &lt;div class="box"&gt;&lt;/div&gt; &lt;div id="divbox"&gt; &lt;p&gt;哈哈,这里是p标签的主场&lt;/p&gt; &lt;/div&gt; &lt;a href="com"&gt;这是第一个a标签&lt;/a&gt; &lt;a href="www"&gt;这是第二个a标签&lt;/a&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;这里是p标签内部,添加了&lt;span&gt;强调的字体&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/body&gt; 对选择集进行过滤 我们可以剔除一些不需要的,保留需要的元素 123$(&apos;div&apos;).has(&apos;p&apos;); // 选择包含p元素的div元素$(&apos;div&apos;).not(&apos;.myClass&apos;); // 选择class不等于myClass的div元素$(&apos;div&apos;).eq(5); // 选择第6个div元素 例如: 123456789101112131415161718192021222324252627&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; var $div = $('div').has('p') $div.html('哈哈,选中的') var $p = $('p').not('.pbox') $p.html('更改的是p标签里面的东西') var $li = $('li').eq(2) $li.html('hahhaa') &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;p&gt;div中的p标签&lt;/p&gt; &lt;/div&gt; &lt;div&gt;哈哈哈哈哈&lt;/div&gt; &lt;p class="pbox"&gt;含有pbox的p标签&lt;/p&gt; &lt;p&gt;纯粹的p标签&lt;/p&gt; &lt;ul&gt; &lt;li&gt;11&lt;/li&gt; &lt;li&gt;22&lt;/li&gt; &lt;li&gt;33&lt;/li&gt; &lt;li&gt;44&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt; 效果: 选择集转移12345678$(&apos;#box&apos;).prev(); // 选择id是box的元素前面紧挨的同辈元素$(&apos;#box&apos;).prevAll(); // 选择id是box的元素之前所有的同辈元素$(&apos;#box&apos;).next(); // 选择id是box的元素后面紧挨的同辈元素$(&apos;#box&apos;).nextAll(); // 选择id是box的元素后面所有的同辈元素$(&apos;#box&apos;).parent(); // 选择id是box的元素的父元素$(&apos;#box&apos;).children(); // 选择id是box的元素的所有子元素$(&apos;#box&apos;).siblings(); // 选择id是box的元素的同级元素$(&apos;#box&apos;).find(&apos;.myClass&apos;); // 选择id是box的元素内的class等于myClass的元素 例如: 1234567891011121314151617181920212223242526272829&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; var $div1 = $('.box') $div1.html('哈哈') var $div2 = $('.box').prev() $div2.html('嘿嘿') var $div3 = $('.box').next() $div3.html('呵呵') var $div4 = $('.box').parent() $div4.append('哇哇') &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;div&gt;第一个div标签&lt;/div&gt; &lt;div&gt;第二个div标签&lt;/div&gt; &lt;div class="box"&gt; &lt;p&gt;div.box中的p标签&lt;/p&gt; &lt;/div&gt; &lt;div&gt;下面倒数第二个div标签&lt;/div&gt; &lt;div&gt;下面倒数第一个div标签&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 结果: 再例如: 12345678910111213141516171819202122232425262728&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; var $div5 = $('.box').siblings() $div5.html('good') var $div6 = $('.box').find('.pbox') $div6.html('呜啊呜啊') &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;div&gt;第一个div标签&lt;/div&gt; &lt;div&gt;第二个div标签&lt;/div&gt; &lt;div class="box"&gt; &lt;p class="pbox"&gt;div.box中添加有class的p标签&lt;/p&gt; &lt;p&gt;div.box中没有添加class的p标签&lt;/p&gt; &lt;/div&gt; &lt;div&gt;下面倒数第二个div标签&lt;/div&gt; &lt;div&gt;下面倒数第一个div标签&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 结果: 判断是否选择到了元素 jquery 有容错机制，即使没有找到元素，也不会出错，可以用 length 属性来判断是否找到了元素, length 等于0，就是没选择到元素，length 大于0，就是选择到了元素。 1234567891011121314151617&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; var $div1 = $('#div1') var $div2 = $('#div2') // 找到了, length大于0 console.log( $div1.length ) // 没有找到, length等于0 console.log( $div2.length ) &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="div1"&gt;&lt;/div&gt;&lt;/body&gt; 结果: 121 0 总结: 通过使用 jquery 的选择器, 我们会发现选中元素变得更加简单 通过这章,我们对标识符有了更深入的了解, js 中的标识符是可以包含 $ 的, 并且可以以它开头 我们可以直接通过某些属性选中需要的元素, 也可以间接通过别的元素选中, 这样的选中方式就是我们说的选择集转移 选择集过滤, 是为了剔除有相同属性的元素, 这样的技能需要掌握, 公司标签多的时候,会使用到. 四. jquery样式操作jquery用法思想使用同一个函数完成读取和赋值 操作样式12345678910使用方法: // 获取div的样式$(&quot;div&quot;).css(&quot;width&quot;);$(&quot;div&quot;).css(&quot;color&quot;);// 设置div的样式$(&quot;div&quot;).css(&quot;width&quot;,&quot;30px&quot;);$(&quot;div&quot;).css(&quot;height&quot;,&quot;30px&quot;);$(&quot;div&quot;).css(&#123;fontSize:&quot;30px&quot;,color:&quot;red&quot;&#125;); 例如: 123456789101112131415161718192021&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; var $div = $('div') $div.css('width','200px') $div.css('height','200px') // 需要注意: 多个属性同时设置,需要使用 &#123;&#125; 包裹 $div.css(&#123;'background-color':'pink','color':'red'&#125;) $div.css(&#123;fontWeight:'bold',fontSize:'30px'&#125;) var width = $div.css('width') var height = $div.css('height') console.log(width) console.log(height) &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;这里有个div&lt;/div&gt;&lt;/body&gt; 特别注意 如果使用选择器获取了多个元素，那么, 获取的信息是第一个元素的，比如：$(“li”).css(“width”)，获取的是第一个 li 的 width。 操作额外样式123456使用方法: $(&quot;#div1&quot;).addClass(&quot;divClass2&quot;) // 给id为div1的对象追加样式divClass2$(&quot;#div1&quot;).removeClass(&quot;divClass&quot;) // 移除div1的divClass的样式类名$(&quot;#div1&quot;).removeClass(&quot;divClass divClass2&quot;) // 移除多个样式$(&quot;#div1&quot;).toggleClass(&quot;anotherClass&quot;) // 重复切换anotherClass样式 例如: 1234567891011121314&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; var $div = $('#div1') $div.addClass('divClass2') // $div[0] 可以将jquery对象变为元素对象 console.log($div[0]) &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="div1" class="divClass"&gt;hahha&lt;/div&gt;&lt;/body&gt; 效果: 1&lt;div id=&quot;div1&quot; class=&quot;divClass divClass2&quot;&gt;hahha&lt;/div&gt; 再例如: 12345678910111213&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; var $div = $('#div1') $div.removeClass('divClass') console.log($div[0]) &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="div1" class="divClass"&gt;hahha&lt;/div&gt;&lt;/body&gt; 结果: 1&lt;div id=&quot;div1&quot; class=&quot;&quot;&gt;hahha&lt;/div&gt; 或者例如: 1234567891011121314&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; var $div = $('#div1') $div.addClass('divClass2') $div.removeClass('divClass divClass2') console.log($div[0]) &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="div1" class="divClass"&gt;hahha&lt;/div&gt;&lt;/body&gt; 结果: 1&lt;div id=&quot;div1&quot; class=&quot;&quot;&gt;hahha&lt;/div&gt; 下一个例如: 12345678910111213141516171819202122&lt;head&gt; &lt;script src="./jquery-1.12.4.min.js"&gt; &lt;/script&gt; &lt;style type="text/css"&gt; .c1 &#123; color: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="div" class="c1"&gt;hello world&lt;/div&gt; &lt;button id="button"&gt; click me&lt;/button&gt; &lt;script type="text/javascript"&gt; $('#button').click(function()&#123; // 点击一个添加当前c1样式,再点击一次取消当前c1样式 $("#div").toggleClass('c1'); &#125;) &lt;/script&gt;&lt;/body&gt; 总结: 使用 jquery 获取当前的标签, 得到标签之后,如果要对标签进行CSS样式的修改,直接调用 .css( ) 方法即可. .css( ) 方法, 可以当做 读取css样式值 来使用, 也可以当做 设置css样式值来使用 额外操作样式的方法就三个: addClass( ) removeClass( ) toggleClass( ) ​]]></content>
      <categories>
        <category>前端 - js - jquery</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>jquery</tag>
        <tag>jquery 选择器</tag>
        <tag>jquery样式操作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript简明教程（二）]]></title>
    <url>%2F2016%2F07%2F26%2F2016-7-26-JavaScript-02%2F</url>
    <content type="text"><![CDATA[概述 介绍 javascript 数组和字符串的操作方法、循环语句、定时器的使用及实例、变量作用域、封闭函数的使用场景。 一、数组&amp;字符串的操作1. 数组及操作方法 数组就是一组数据的集合，javascript 中，数组里面的数据可以是不同类型的, 这里的数组就相当于我们 python 中的列表 定义数组的方法1234567数组定义形式: 第一种: var 数组名 = new Array(元素一, 元素二, 元素三...)第二种: var 数组名 = [元素一, 元素二, 元素三...] 例如: 12345// 对象的实例创建var aList = new Array(1,2,3);// 直接量创建var aList2 = [1,2,3,'asd']; 2. 数组常见的操作方法:1、获取数组的长度： 一般我们获取数组长度使用: length 1234var aList = [1,2,3,4];// 打印输出数组 aList 的长度console.log(aList.length) 结果: 14 var aList = [‘光头强’, ‘熊大’, ‘熊二’, ‘翠花’, ‘吉吉’, ‘萝卜头] 2、下标索引的使用： 和python一样, 我们也可以利用下标索引的思想来操作数组中某一个元素: aList[0] 123var aList = [1,2,3,4];console.log(aList[0]); 结果: 11 var aList = [‘美羊羊’, ‘慢羊羊’, ‘红太狼’, ‘喜羊羊’, ‘懒羊羊’] 3、join(分隔符) 将数组成员通过一个分隔符合并成字符串 123456var aList = [1, 2, 3, 4]var newList = aList.join(&apos;-&apos;)console.log(newList)console.log(typeof(newList)) 结果: 121-2-3-4string var aList = [‘七龙珠’, ‘史努比’, ‘铁壁阿童木’, ‘忍者神龟’, ‘兔八哥’] 4、push( ) 和 pop( ) 从数组最后增加成员或删除成员 1234567var aList = [1,2,3,4];aList.push(5);console.log(aList)aList.pop()console.log(aList) 结果: 123[1, 2, 3, 4, 5][1, 2, 3, 4] var aList = [‘灌篮高手’, ‘邋遢大王奇遇记’, ‘变形金刚’] 5、reverse( ) 将数组反转 1234var aList = [3,2,1,4];aList.reverse();console.log(aList) 结果: 1[4, 1, 2, 3] var aList = [‘蜡笔小新’, ‘舒塔和贝塔’, ‘魔神英雄坛’, ‘棒球英豪’] 6、indexOf( ) 返回数组中元素第一次出现的索引值: 如果有, 则正常返回索引值 如果检索的内容不存在于数组中, 则返回 -1 1234var aList = [1,2,3,4,1,3,4];console.log( aList.indexOf(4) )console.log( aList.indexOf(5) ) 结果: 123-1 var aList = [‘美少女战士’, ‘犬夜叉’, ‘黄金圣斗士’, ‘猫和老鼠’, ‘美少女战士’, ‘猫和老鼠’] 7、splice( ) 在数组中增加或删除成员 123使用格式: 数组名.splice(index,howmany,item1,.....,itemX) index: 必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。 howmany: 必需。要删除的项目数量。如果设置为 0，则不会删除项目。 item1, …, itemX: 可选。向数组添加的新项目。 例如: 12345var aList = [1,2,3,4];// 从第2个元素开始，删除1个元素，然后在此位置增加&apos;7,8,9&apos;三个元素aList.splice(2,1,7,8,9); alert(aList); //弹出 1,2,7,8,9,4 8. 多维数组 多维数组指的是数组的成员也是数组的数组。 123var aList = [[1,2,3],[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]];alert(aList[0][1]); //弹出2; 批量操作数组中的数据，需要用到循环语句 2. 循环程序中进行有规律的重复性操作，需要用到循环语句。 for循环 123456使用格式:for (var i=0;i&lt;5;i++)&#123; console.log(i)&#125; 打印结果: 12345201234 课堂练习1、数组去重 var aList = [1,2,3,4,4,3,2,1,2,3,4,5,6,5,5,3,3,4,2,1]; 123456789101112131415161718192021222324252627282930313233var aList = [1,2,3,4,4,3,2,1,2,3,4,5,6,5,5,3,3,4,2,1];var aList2 = [];// 第一种方法: for (var i=0;i&lt; aList.length;i++)&#123; var value = aList[i] if (aList2.indexOf(value) + 1)&#123; console.log(&apos;重复了&apos;,value) &#125; else &#123; aList2.push(value) &#125;&#125;console.log(aList2)// 第二种方法:for(var i=0;i&lt;aList.length;i++)&#123; if(aList.indexOf(aList[i])==i) &#123; aList2.push(aList[i]); &#125;&#125;// 第三种方法for (var i = 0; i &lt; arr.length; i++) &#123; if (arr.indexOf(arr[i]) != i) &#123; arr.splice(i, 1); i--; &#125; &#125; alert(arr);alert(aList2); 2、将数组数据放入页面 var list = [‘弱点’, ‘看不见的客人’, ‘摔跤吧, 爸爸’, ‘龙猫’, ‘全民目击’, ‘触不可及’, ‘萨利机长’,’消失的爱人] 1234567891011121314151617181920JS部分: &lt;script&gt; window.onload = function () &#123; var ul = document.getElementById(&apos;ulbox&apos;) var list = [&apos;弱点&apos;,&apos;看不见的客人&apos;,&apos;摔跤吧, 爸爸&apos;,&apos;龙猫&apos;,&apos;全民目击&apos;,&apos;触不可及&apos;,&apos;萨利机长&apos;] var str = &apos;&apos; for (var i=0;i&lt;list.length;i++)&#123; value = list[i] str += &apos;&lt;li&gt;&apos; + value + &apos;&lt;/li&gt;&apos; &#125; console.log(str) ul.innerHTML = str &#125;&lt;/script&gt;HTML部分: &lt;ul id=&quot;ulbox&quot;&gt;&lt;/ul&gt; 3. 字符串处理方法1、+ 运算符 如果是两个数字进行相加运算, 得到的是 两个数的和 如果是两个字符串进行相加运算, 得到的是 两个字符串的拼接 如果是一个字符串, 一个数字的相加运算, 得到的是 拼接的结果 12345678var iNum01 = 12;var iNum02 = 24;var sNum03 = &apos;12&apos;;var sTr = &apos;abc&apos;;alert( iNum01 + iNum02 ); // 弹出36alert( iNum01 + sNum03 ); // 弹出1212 数字和字符串相加等同于字符串相加alert( sNum03 + sTr ); // 弹出12abc 2、parseInt( ) 将 数字字符串 转化为 整数 12345678var sNum01 = &apos;12&apos;;var sNum02 = &apos;24&apos;;var sNum03 = &apos;12.32&apos;;alert( sNum01+sNum02 ); // 弹出1224alert( parseInt(sNum01) + parseInt(sNum02) ) // 弹出36alert( parseInt(sNum03) ) // 弹出数字12 将字符串小数转化为数字整数 3、parseFloat() 将数字字符串转化为小数 12var sNum03 = &apos;12.32&apos;alert( parseFloat(sNum03) ); // 弹出 12.32 将字符串小数转化为数字小数 4、split( ) 把 一个字符串 分隔成 字符 组成的 数组 12345678var sTr = &apos;2017-4-22&apos;;var aStr1 = sTr.split(&quot;-&quot;);var aStr2 = sTr.split(&quot;&quot;);var aStr3 = sTr.split();console.log(aStr1); console.log(aStr2); console.log(aStr3) 结果: 123[&apos;2017&apos;,&apos;4&apos;,&apos;22&apos;][&apos;2&apos;,&apos;0&apos;,&apos;1&apos;,&apos;7&apos;,&apos;-&apos;,&apos;4&apos;,&apos;-&apos;,&apos;2&apos;,&apos;2&apos;][&apos;2017-4-22&apos;] 练习: var str=”How are you doing today?” 如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割。 注意： split() 方法不改变原始字符串。 123456789&lt;p id=&quot;demo&quot;&gt;单击按钮显示分割后的数组.&lt;/p&gt;&lt;button onclick=&quot;myFunction()&quot;&gt;点我&lt;/button&gt;&lt;script&gt;function myFunction()&#123; var str=&quot;How are you doing today?&quot;; var n=str.split(&quot; &quot;); document.getElementById(&quot;demo&quot;).innerHTML=n;&#125;&lt;/script&gt; 5、indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。 如果要检索的字符串值没有出现，则该方法返回 -1。 1234var sTr = &quot;abcdefgh&quot;;var iNum = sTr.indexOf(&quot;c&quot;);alert(iNum); // 弹出2 6、substring( ) 截取字符串 左闭右开 [start, stop) start &lt;= x &lt; stop 123使用方法: 字符串.substring(start,stop) start: 必需。一个非负的整数，规定要提取的子串的第一个字符在 字符串 中的位置。 stop: 可选。一个非负的整数，比要提取的子串的最后一个字符在 字符串 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 例如: 123456var sTr = &quot;abcdefghijkl&quot;;var sTr2 = sTr.substring(3,5);var sTr3 = sTr.substring(1);alert(sTr2); // 弹出 dealert(sTr3); // 弹出 bcdefghijkl 7. 字符串反转: 将字符串的内容颠倒过来, 不是排序 1234var str = &apos;asdfj12jlsdkf098&apos;;var str2 = str.split(&apos;&apos;).reverse().join(&apos;&apos;);console.log(str2); 结果: 1890fkdslj21jfdsa 思考: 如果我们把上面的式子写成下面的样子, 能否达到同样的效果: 1234var str = &apos;asdfj12jlsdkf098&apos;;var str2 = str.split().reverse().join(&apos;&apos;);console.log(str2); 结果: 1asdfj12jlsdkf098 二. 调试程序的方法 alert 12345使用方式: alert(要展示的内容)alert展示内容的形式是弹出一个对话框, 然后把内容添加上去. 通常用于程序需要暂时停止的情况 console.log 12345使用方式: console.log(要展示的内容)console.log()方法能够帮助我们将调试的代码展示在浏览器的控制台一般我们使用这样的调试方式较多, 而且浏览器控制台能够直接修改代码, 方便我们多次调试 document.title 12345使用方法: document.title = 要显示的内容这样的方式可以把要调试的内容,展示在网页的标题区域这样的方式适合于偶尔展示 document.write( ) 123456使用方法: document.write(exp1,exp2,exp3,....)write() 方法可向文档写入 HTML 表达式或 JavaScript 代码可列出多个参数(exp1,exp2,exp3,...) ，它们将按顺序被追加到文档中。一般不怎么使用, 偶尔可用 ​ 三 . 定时器 定时器在 javascript 中的作用 定时调用函数 制作动画 模拟网络延时的情况 1. 定时器的种类: 执行一次的定时器: setTimeout 执行多次的定时器: setInterval 关闭只执行一次的定时器: clearTimeout 关闭反复执行的定时器: clearInterval 123定时器的使用方式: setInterval(code,millisec) code 必需。要调用的函数或要执行的代码串。 millisec 必须。周期性执行或调用 code 之间的时间间隔，以毫秒计。 例如: 123456789101112// 设置定时器var time1 = setTimeout(myalert,2000);var time2 = setInterval(myalert,2000);// 去除定时器clearTimeout(time1);clearInterval(time2);// 定时器调用的方法function myalert()&#123; alert('ok!');&#125; 1. 使用定时器 —– 使方框移动1234567891011121314151617181920212223242526272829303132CSS部分: &lt;style&gt; .box&#123; width:300px; height:300px; background:gold; position:fixed; left:0px; top:100px; &#125;&lt;/style&gt;JS部分: &lt;script&gt; window.onload = function()&#123; var oBox = document.getElementById('box'); var iLeft = 0; var oTimer = setInterval(fnMove,30); function fnMove()&#123; iLeft += 3; if(iLeft&gt;600) &#123; clearInterval(oTimer); &#125; oBox.style.left = iLeft + 'px'; &#125; &#125; &lt;/script&gt;HTML部分: &lt;div class="box" id="box"&gt;&lt;/div&gt; 2. 使方框左右移动:12345678910111213141516171819202122232425262728293031323334353637383940CSS部分: &lt;style&gt; .box&#123; width:300px; height:300px; background:gold; position:fixed; left:0px; top:100px; &#125;&lt;/style&gt;JS部分: &lt;script&gt; window.onload = function()&#123; var oBox = document.getElementById('box'); var iLeft = 0; var iSpeed = 3; var oTimer = setInterval(fnMove,30); function fnMove()&#123; iLeft += iSpeed; if(iLeft&gt;600) &#123; iSpeed = -3; &#125; if(iLeft&lt;0) &#123; iSpeed = 3; &#125; oBox.style.left = iLeft + 'px'; &#125; &#125; &lt;/script&gt;HTML部分:&lt;div class="box" id="box"&gt;&lt;/div&gt; 3. 无限轮播动画123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144CSS部分: &lt;style type="text/css"&gt; body,ul&#123; margin:0; padding:0; &#125; .list_con&#123; width:1000px; height:200px; border:1px solid #000; margin:10px auto 0; background-color:#f0f0f0; position:relative; overflow:hidden; &#125; .list_con ul&#123; list-style:none; width:2000px; height:200px; position:absolute; left:0; top:0; &#125; .list_con li&#123; width:180px; height:180px; float:left; margin:10px; &#125; .btns_con&#123; width:1000px; height:30px; margin:50px auto 0; position:relative; &#125; .left,.right&#123; width:30px; height:30px; background-color:gold; position:absolute; left:-40px; top:124px; font-size:30px; line-height:30px; color:#000; font-family: 'Arial'; text-align:center; cursor:pointer; border-radius:15px; opacity:0.5; &#125; .right&#123; left:1010px; top:124px; &#125;&lt;/style&gt;JS部分:&lt;script type="text/javascript"&gt; window.onload = function()&#123; // 获取图片的容器 var oUl = document.getElementById('list'); // 获取左右两个按钮 var oLeft = document.getElementById('btn01'); var oRight = document.getElementById('btn02'); // ul的容器 var oSlide = document.getElementById('slide'); // 将ul中的5个li复制一份 oUl.innerHTML = oUl.innerHTML + oUl.innerHTML; var iLeft = 0; var iSpeed = -3; // 定义变量存储iSpeed的值 var iLastSpeed = 0; var oTimer = setInterval(fnMove,30); function fnMove()&#123; iLeft += iSpeed; // 当移动到最左边的时候 if(iLeft&lt;-1000) &#123; iLeft = 0; &#125; // 当移动到最右边的时候 if(iLeft&gt;0)&#123; iLeft = -1000; &#125; oUl.style.left = iLeft + 'px'; &#125; oLeft.onclick = function()&#123; iSpeed = -3; &#125; oRight.onclick = function()&#123; iSpeed = 3; &#125; // 定义鼠标移入事件 oSlide.onmouseover = function()&#123; iLastSpeed = iSpeed; iSpeed = 0; //clearInterval(oTimer); &#125; // 定义鼠标移出事件 oSlide.onmouseout = function()&#123; iSpeed = iLastSpeed; //oTimer = setInterval(fnMove,30); &#125; &#125; &lt;/script&gt;HTML部分: &lt;body&gt; &lt;div class="btns_con"&gt; &lt;div class="left" id="btn01"&gt;&amp;lt;&lt;/div&gt; &lt;div class="right" id="btn02"&gt;&amp;gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="list_con" id="slide"&gt; &lt;ul id="list"&gt; &lt;li&gt;&lt;a href=""&gt;&lt;img src="images/goods001.jpg" alt="商品图片"&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=""&gt;&lt;img src="images/goods002.jpg" alt="商品图片"&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=""&gt;&lt;img src="images/goods003.jpg" alt="商品图片"&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=""&gt;&lt;img src="images/goods004.jpg" alt="商品图片"&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=""&gt;&lt;img src="images/goods005.jpg" alt="商品图片"&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt; 四 . 变量作用域变量作用域指的是变量的作用范围，javascript 中的变量分为全局变量和局部变量。 全局变量：在函数之外定义的变量，为整个页面公用，函数内部外部都可以访问。 局部变量：在函数内部定义的变量，只能在定义该变量的函数内部访问，外部无法访问。 1234567891011121314151617&lt;script type="text/javascript"&gt; // 定义全局变量 var a = 12; function myalert() &#123; // 定义局部变量 // a = 12 var b = 23; alert(a); // 修改全局变量 a++; alert(b); &#125; myalert(); // 弹出12和23 alert(a); // 弹出13 alert(b); // 出错&lt;/script&gt; 五. 封闭函数封闭函数是 javascript 中匿名函数的另外一种写法，创建一个一开始就执行而不用命名的函数。 一般定义的函数和执行函数： 12345function myalert()&#123; alert(&apos;hello!&apos;);&#125;;myalert(); 封闭函数： 123(function()&#123; alert(&apos;hello!&apos;);&#125;)(); 还可以在函数定义前加上“~”和“!”等符号来定义匿名函数 123!function()&#123; alert(&apos;hello!&apos;);&#125;() 封闭函数的作用 封闭函数可以创造一个独立的空间 在封闭函数内定义的变量和函数不会影响外部同名的函数和变量，可以避免命名冲突 在页面上引入多个 js 文件时，用这种方式添加 js 文件比较安全，比如： 12345678910111213141516var iNum01 = 12;function myalert()&#123; alert(&apos;hello!&apos;);&#125;(function()&#123; var iNum01 = 24; function myalert()&#123; alert(&apos;hello!world&apos;); &#125; alert(iNum01); myalert()&#125;)()alert(iNum01);myalert();]]></content>
      <categories>
        <category>前端 - js</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
        <tag>js 调试程序</tag>
        <tag>javascript 数组/字符串</tag>
        <tag>js定时器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript简明教程（一）]]></title>
    <url>%2F2016%2F07%2F25%2F2016-7-25-JavaScript-01%2F</url>
    <content type="text"><![CDATA[JavaScript 概述JavaScript 是运行在浏览器端的脚步语言，JavaScript 主要解决的是前端与用户交互的问题，包括使用交互与数据交互。 JavaScript是浏览器解释执行的，前端脚本语言还有JScript（微软，IE独有），ActionScript( Adobe公司，需要插件)等。 前端三大块1、HTML：页面结构2、CSS：页面表现：元素大小、颜色、位置、隐藏或显示、部分动画效果3、JavaScript：页面行为：部分动画效果、页面与用户的交互、页面功能 1. HTML 引入 JavaScript 的方式1、行间事件（主要用于事件） 1&lt;input type=&quot;button&quot; name=&quot;&quot; onclick=&quot;alert(&apos;ok！&apos;);&quot;&gt; 2、页面script标签嵌入 123&lt;script type=&quot;text/javascript&quot;&gt; alert(&apos;ok！&apos;);&lt;/script&gt; 3、外部引入2 1&lt;script type=&quot;text/javascript&quot; src=&quot;js/index.js&quot;&gt;&lt;/script&gt; 2. 变量、数据类型及基本语法规范JavaScript 是一种弱类型语言，javascript的变量类型由它的值来决定。 定义变量需要用关键字 ‘var’ 12345var iNum = 123var sTr = &apos;asd&apos;//同时定义多个变量可以用&quot;,&quot;隔开，公用一个‘var’关键字var iNum = 45, sTr=&apos;qwe&apos;, sCount=&apos;68&apos;; 基本数据类型 5种基本数据类型：1、number 数字类型2、string 字符串类型3、boolean 布尔类型 true 或 false4、undefined undefined类型，变量声明未初始化，它的值就是undefined5、null null类型，表示空对象，如果定义的变量将来准备保存对象，可以将变量初始化为null,在页面上获取不到对象，返回的值就是null 1种复合类型： object javascript语句与注释 1、javascript语句开始可缩进也可不缩进，缩进是为了方便代码阅读，一条javascript语句应该以“;”结尾; 12345678&lt;script type=&quot;text/javascript&quot;&gt; var iNum = 123; var sTr = &apos;abc123&apos;; function fnAlert()&#123; alert(sTr); &#125;; fnAlert();&lt;/script&gt; 2、javascript注释 1234567891011&lt;script type=&quot;text/javascript&quot;&gt; // 单行注释 var iNum = 123; /* 多行注释 1、... 2、... */ var sTr = &apos;abc123&apos;;&lt;/script&gt; 变量、函数、属性、函数参数命名规范 1、区分大小写2、第一个字符必须是字母、下划线（_）或者美元符号（$）3、其他字符可以是字母、下划线、美元符或数字 匈牙利命名风格： 对象o Object 比如：oDiv数组a Array 比如：aItems字符串s String 比如：sUserName整数i Integer 比如：iItemCount布尔值b Boolean 比如：bIsComplete浮点数f Float 比如：fPrice函数fn Function 比如：fnHandler正则表达式re RegExp 比如：reEmailCheck 3.函数 函数就是重复执行的代码片段。 1. 函数定义与执行12345678&lt;script type="text/javascript"&gt; // 函数定义 function fnAlert()&#123; alert('hello!'); &#125; // 函数执行 fnAlert();&lt;/script&gt; 变量 与 函数 预解析 JavaScript 解析过程分为两个阶段，先是编译阶段，然后执行阶段，在编译阶段会将function定义的函数提前，并且将var定义 的变量声明提前，将它赋值为 undefined。 12345678910111213&lt;script type="text/javascript"&gt; fnAlert(); // 弹出 hello！ function fnAlert()&#123; alert('hello!'); &#125; alert(iNum); // 弹出 undefined var iNum = 123; &lt;/script&gt; 2. 函数传参 Javascript 的函数中可以传递参数。 123456&lt;script type=&quot;text/javascript&quot;&gt; function fnAlert(a)&#123; alert(a); &#125; fnAlert(12345);&lt;/script&gt; 3. 函数的返回值 JavaScript 中函数使用 return 返回内容 函数中 ‘return’ 关键字的作用： 返回函数中的值或者对象 结束函数的运行 1234567891011121314&lt;script type="text/javascript"&gt; // 函数的定义 function addFunc(num1, num2)&#123; var result = num1 + num2; return result; alert('here!'); &#125; // 函数的调用 var result = addFunc(3,4); // 弹出7 alert(result); &lt;/script&gt; 4. 条件语句 想要控制程序的走向，一般使用条件语句。 1) 条件运算符和逻辑运算符: 条件运算符 说明 举例 == 只要求值相等(在比较时会转换数据类型) “1” == true (结果为true) === 要求值和类型都相等 “1” === true (结果为false) &gt; 大于 3 &gt; 5 (结果为false) &lt; 小于 3 &lt; 5 (结果为true) &gt;= 大于等于 3 &gt;= 5 (结果为false) &lt;= 小于等于 3 &lt;= 5 (结果为true) != 不等于 3 != 5 (结果为true) &amp;&amp;(逻辑与) 同真为真,一假则假 x &amp;&amp; y (同真为真,一假则假) \ \ (逻辑或) 全假为假, 一真则真 x \ \ y (全假为假, 一真则真) ! (逻辑非) 非眞则假,非假则真 (取反) ! x (非眞则假,非假则真) 2) 条件语句表达式 if 语句单独使用: 使用时机: 满足一个条件时,进行处理, 其他情况不考虑的. 1234567使用格式: if (判断条件) &#123; // 如果条件为 true, 进入这里执行 执行的语句01 ...&#125; if…… else…. 语句: 使用时机: 针对一个条件, 满足处理, 不满足也处理. 只针对一个条件, 互为互斥事件. 1234567891011使用格式: if (判断条件) &#123; // 如果条件为 true, 进入这里执行 执行的语句01 ...&#125; else &#123; // 如果条件为 false, 进入这里执行 执行的语句01 ...&#125; if….. else if ….. 语句 使用时机: 针对不同的条件, 进行不同的处理. 需要注意是针对多个条件, 条件间没有必然联系 注意: else if 可以有无限个 1234567891011使用格式: if (判断条件01) &#123; // 如果第一个条件为 true, 进入这里执行 执行的语句01 ...&#125; else if (判断条件02) &#123; // 如果第二个条件为 true, 进入这里执行 执行的语句01 ...&#125; if….. else if …… else…… 语句 123456789101112131415使用格式: if (判断条件01) &#123; // 如果第一个条件为 true, 进入这里执行 执行的语句01 ...&#125; else if (判断条件02) &#123; // 如果第二个条件为 true, 进入这里执行 执行的语句01 ...&#125; else &#123; // 如果上面两个条件都不满足, 进入这里执行 执行的语句01 ...&#125; ​ 举例: 123456789var iNum01 = 3;var iNum02 = 5;var sTr;if ( iNum01 &gt; iNum02 )&#123; sTr = &apos;大于&apos;;&#125; else &#123; sTr = &apos;小于&apos;;&#125;alert(sTr); 语句嵌套: 12345678var a = 100if (a &gt; 10) &#123; if (a &gt; 20) &#123; alert(&apos;大于20啦&apos;) &#125;&#125; else &#123; alert(&apos;没有10大&apos;)&#125; 3) 总结: &amp;&amp; (同真为真, 一假为假) ​ True &amp;&amp; True ==&gt; True ​ False &amp;&amp; True ==&gt; False ​ True &amp;&amp; False ==&gt; False ​ False &amp;&amp; False ==&gt; False || (全假为假, 一真则真) ​ True || True ===&gt; True ​ False || True ===&gt; True ​ True || False ===&gt; True ​ False || False ===&gt; False ! (非, 取反) ​ ! True ===&gt; False ​ ! False ===&gt; True 5. 获取元素方法 我们可以通过一些方法, 来获取 HTML 中的元素 通过内置对象 document 的 getElementById 方法来获取页面上设置了id属性的元素 获取到的是一个 html 对象，然后将它赋值给一个变量，比如： 1234567JS部分:&lt;script type=&quot;text/javascript&quot;&gt; var oDiv = document.getElementById(&apos;div1&apos;);&lt;/script&gt;HTML部分:&lt;div id=&quot;div1&quot;&gt;这是一个div元素&lt;/div&gt; 注意: 上面的语句，如果把 javascript 写在元素的上面，会获取不到当前的 HTML 元素: 因为页面是从上往下加载执行的，javascript 从页面上获取元素 div1 的时候，元素 div1 还没有加载. 解决方法: 第一种方法：将 javascript 放到页面最下边 12345678&lt;body&gt; &lt;div id=&quot;div1&quot;&gt;这是一个div元素&lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; var oDiv = document.getElementById(&apos;div1&apos;) alert(oDiv) &lt;/script&gt;&lt;/body&gt; 第二种方法：将 javascript 语句放到 window.onload 触发的函数里面 window.onload 方法会在当前页面加载完成之后触发 获取元素的语句放在这个方法中执行，就可以正常获取了。 123456789&lt;script type=&quot;text/javascript&quot;&gt; window.onload = function()&#123; var oDiv = document.getElementById(&apos;div1&apos;); &#125;&lt;/script&gt;&lt;div id=&quot;div1&quot;&gt;这是一个div元素&lt;/div&gt; 6. 操作元素属性 获取的页面元素，就可以对页面元素的属性进行操作，属性的操作包括属性的读和写。 操作元素属性 读取属性: var 变量 = 元素.属性名 12345678910111213&gt; JS部分:&gt; var oInput = document.getElementById(&apos;input1&apos;);&gt; var oA = document.getElementById(&apos;link1&apos;);&gt; // 读取属性值&gt; var sValue = oInput.value;&gt; var sType = oInput.type;&gt; var sName = oInput.name;&gt; var sLinks = oA.href;&gt; &gt; HTML部分:&gt; &lt;input type=&quot;text&quot; name=&quot;setsize&quot; id=&quot;input1&quot; value=&quot;20px&quot;&gt;&gt; &lt;a href=&quot;http://www.itcast.cn&quot; id=&quot;link1&quot;&gt;传智播客&lt;/a&gt;&gt; 改写属性: 元素.属性名 = 新属性值 123456789&gt; JS部分:&gt; var oA = document.getElementById(&apos;link1&apos;);&gt; // 写(设置)属性&gt; oA.style.color = &apos;red&apos;;&gt; oA.style.fontSize = sValue;&gt; &gt; HTML部分:&gt; &lt;a href=&quot;http://www.itcast.cn&quot; id=&quot;link1&quot;&gt;传智播客&lt;/a&gt;&gt; 如果在 JS 中获取 HTML 的相关属性, 有如下注意点: 如果能够在 HTML 页面正常看到的属性, 我们在 JS 中可以同名获取 如果在 JS 中想要获取 HTML 元素的 class 属性, 我们需要使用 className 来获取 对于 style 里面的属性, 如果使用 ‘-‘ 链接的, 我们要改成驼峰式, 例如: font-size 改成: style.fontSize 上面修改的是标签的属性, 如果我们想要通过 JS 修改标签中的文本内容, 应该怎样修改呢? 我们可以通过: innerHTML 来进行修改: innerHTML 可以读取或者写入标签的文本部分 1234567891011121314JS部分: &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function()&#123; var oDiv = document.getElementById(&apos;div1&apos;); //读取 var sTxt = oDiv.innerHTML; alert(sTxt); //写入 oDiv.innerHTML = &apos;&lt;a href=&quot;http://www.itcast.cn&quot;&gt;传智播客&lt;a/&gt;&apos;; &#125;&lt;/script&gt;&lt;div id=&quot;div1&quot;&gt;这是一个div元素&lt;/div&gt; 7. 事件属性及匿名函数1) 事件属性 标签上除了可以添加 样式, id, class等属性之外, 还可以添加事件属性. 最常用的事件属性有: 鼠标单击事件 onclick 鼠标双击事件 ondblclick (double) 鼠标移入事件 onmouseover 鼠标移除事件 onmouseout 说明: 我们可以通过将函数名赋值给事件属性的形式, 将 事件 和 函数 关联起来 1234567891011&lt;script type=&quot;text/javascript&quot;&gt; window.onload = function()&#123; var oBtn = document.getElementById(&apos;btn1&apos;); oBtn.onclick = myalert; function myalert()&#123; alert(&apos;ok!&apos;); &#125; &#125;&lt;/script&gt; 2) 匿名函数 没有名字的函数, 称为匿名函数 可以将匿名函数的定义直接赋值给元素的事件属性来完成事件和函数的关联，这样可以减少函数命名，并且简化代码。函数如果做公共函数，就可以写成匿名函数的形式。 1234567891011121314151617&lt;script type=&quot;text/javascript&quot;&gt; window.onload = function()&#123; // 正常的函数赋值调用 var oBtn = document.getElementById(&apos;btn1&apos;); oBtn.onclick = myalert; function myalert()&#123; alert(&apos;ok!&apos;); &#125; // 匿名函数的使用 oBtn.onclick = function ()&#123; alert(&apos;ok!&apos;); &#125; &#125;&lt;/script&gt;]]></content>
      <categories>
        <category>前端 - js</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
        <tag>javascript</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css定位]]></title>
    <url>%2F2016%2F07%2F23%2F2016-7-23-css%E5%AE%9A%E4%BD%8D%2F</url>
    <content type="text"><![CDATA[. 文档流概念 文档流，是指盒子按照 HTML 标签编写的顺序依次从上到下，从左到右排列，块元素占一行，行内元素在一行之内从左到右排列，先写的先排列，后写的排在后面，每个盒子都占据自己的位置。 一. 定位 把某一个标签, 安置到某一个位置去, 这个过程称为定位 1. 定位分类: 我们可以使用 CSS 的 position 属性来设置元素的定位类型，position 的设置项如下： static 默认值. 没有定位: 元素出现在正常的流中(忽略top, bottom, left, right 或者 z-index 声明) relative 生成相对定位元素，一般是将父级设置相对定位，子级设置绝对定位，子级就以父级作为参照来定位，否则子级相对于body来定位。 absolute: 生成绝对定位元素，元素脱离文档流，不占据文档流的位置，可以理解为漂浮在文档流的上方，相对于上一个设置了定位的父级元素来进行定位，如果找不到，则相对于body元素进行定位。 fixed: 生成固定定位的元素，相对于浏览器窗口进行定位。 元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。 定位元素的偏移 定位的元素还需要用left、right、top或者bottom来设置相对于参照元素的偏移值。 1. 相对定位: 相对定位是相对于该元素在文档流中的原始位置,即以自己原始位置为参照物. 有趣的是: 即使设置了元素的相对定位以及偏移值, 元素还占有原来的位置, 即占据文档流的空间.对象遵循正常文档流, 但依据 top, left, right, bottom等属性在正常文档流中偏移位置. 而其层叠通过 z-index 属性定义 注意: position: relative 的主要用法是: 方便绝对定位元素找到参照物. 12345678910111213141516171819202122232425262728293031323334353637383940CSS部分: &lt;style&gt; .con &#123; width:300px; height:300px; border:1px solid black; margin:0px auto; &#125; .con div &#123; width:200px; height:70px; margin:10px; &#125; .box01 &#123; background:lightgreen; /* 设置相对定位 */ position:relative; left:50px; top:50px; &#125; .box02 &#123; background: lightskyblue &#125; .box03 &#123; background: lightpink; &#125;&lt;/style&gt;HTML部分:&lt;!-- .con&gt;.box01+.box02+.box03 --&gt;&lt;div class="con"&gt; &lt;div class="box01"&gt;1&lt;/div&gt; &lt;div class="box02"&gt;2&lt;/div&gt; &lt;div class="box03"&gt;3&lt;/div&gt;&lt;/div&gt; 2. 绝对定位: 定义: 设置为绝对定位的元素框从文档流完全删除, 并相对于最近的已定位祖先元素定位, 如果元素没有已定位的祖先元素,那么他的位置相对于最初的包含块( 即body元素 ). 元素原先在正常文档流中所占的空间会关闭, 就好像该元素原来不存在一样. 元素定位后生成一个块级框, 而不论原来它在正常流中生成何种类型的框. 重点: 如果父级设置了 position 属性, 例如: position: relative, 那么子元素就会以父级的左上角为原点进行定位. 这样能很好的解决自适应网站的标签偏离问题, 即父级为自适应, 那我子元素就设置position:absolute; 父元素设置position: relative; 然后top, bottom, right, left 用百分比宽度表示. 总结: 参照物用相对定位, 子元素用绝对定位, 并且保证相对定位参照物不会偏移即可. 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;style&gt; .con&#123; width:300px; height:300px; border:1px solid black; margin:0px auto; /* 父级设置为相对定位，不设置偏移，子级就可以以它为参照做绝对定位 */ position: relative; /* 设置父级的溢出隐藏 */ overflow: hidden; &#125; .con div&#123; width:200px; height:70px; margin:10px; &#125; .box01&#123; background:lightgreen; /* 设置绝对定位 */ position:absolute; left:131px; top:50px; &#125; .box02&#123; background: lightskyblue &#125; .box03&#123; background: lightpink; &#125;&lt;/style&gt;HTML部分:&lt;!-- .con&gt;.box01+.box02+.box03 --&gt;&lt;div class="con"&gt; &lt;div class="box01"&gt;1&lt;/div&gt; &lt;div class="box02"&gt;2&lt;/div&gt; &lt;div class="box03"&gt;3&lt;/div&gt;&lt;/div&gt; 3. 固定定位 fixed: 对象脱离正常文档流, 使用 top, right, bottom, left等属性以窗口为参照点进行定位, 当出现滚动条时, 对象不会随着滚动. 而其层叠通过 z-index 属性定义. 注意点: 一个元素若设置了 position: absolute | fixed; 则该元素就不能设置 float. 这是一个常识性知识点, 因为这是两个不同的流, 一个是浮动流, 另一个是 定位流. 但是 relative 却可以. 因为它原本所占的空间仍然占据文档流. 理论上, 被设置为 fixed 的元素会被定位于浏览器敞口的一个指定坐标, 不论窗口是否滚动, 他都会固定在这个位置. 1234567891011121314151617181920212223242526272829303132333435363738&lt;style&gt; .con&#123; width:300px; height:300px; border:1px solid black; margin:0px auto; &#125; .con div&#123; width:200px; height:70px; margin:10px; &#125; .box01&#123; background:lightgreen; /* 设置固定定位 */ position:fixed; right:131px; bottom:50px; &#125; .box02&#123; background: lightskyblue &#125; .box03&#123; background: lightpink; &#125;&lt;/style&gt;HTML部分:&lt;!-- .con&gt;.box01+.box02+.box03 --&gt;&lt;div class="con"&gt; &lt;div class="box01"&gt;1&lt;/div&gt; &lt;div class="box02"&gt;2&lt;/div&gt; &lt;div class="box03"&gt;3&lt;/div&gt;&lt;/div&gt; 2. 元素层级 绝对定位元素是浮动在正常的文档流之上的，可以用 z-index 属性来设置元素的层级 例如: 伪代码如下:2 1234567.box01&#123; ...... position:absolute; /* 设置了绝对定位 */ left:200px; /* 相对于参照元素左边向右偏移200px */ top:100px; /* 相对于参照元素顶部向下偏移100px */ z-index:10 /* 将元素层级设置为10 */&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748CSS部分: &lt;style&gt; .con&#123; width:300px; height:300px; border:1px solid black; margin:0px auto; position: relative; &#125; .con div&#123; width:200px; height:70px; margin:10px; position:absolute; &#125; .box01&#123; background:lightgreen; left:0px; top:0px; /* 设置定位元素的层级 */ z-index:6; &#125; .box02&#123; background: lightskyblue; left:30px; top:30px; z-index:7; &#125; .box03&#123; background: lightpink; left:60px; top:60px; z-index:8; &#125;&lt;/style&gt;HTML部分: &lt;!-- .con&gt;.box01+.box02+.box03 --&gt;&lt;div class="con"&gt; &lt;!-- 如果不设置z-index属性，定位元素的层级安装代码书写的顺序，先写的排列在下面，后写的排列在上面 --&gt; &lt;div class="box01"&gt;1&lt;/div&gt; &lt;div class="box02"&gt;2&lt;/div&gt; &lt;div class="box03"&gt;3&lt;/div&gt;&lt;/div&gt; 3. 练习: 用固定定位创建弹窗 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;style&gt; .pop&#123; width:500px; height:300px; border:1px solid black; background:white; position: fixed; /* 弹框水平垂直居中的写法： */ left:50%; top:50%; margin-left:-251px; margin-top:-151px; /* 设置弹框的层级,设置比较大的值，盖住其他所有的元素*/ z-index:9999; &#125; .pop h3&#123; margin:5px; background: lightskyblue; line-height:40px; &#125; .mask&#123; position:fixed; left:0px; top:0px; width:100%; height:100%; background:black; z-index:9998; /* 设置背景的透明度 */ opacity:0.3; /* 透明度兼容写法，兼容IE */ filter:alpha(opacity=30); &#125; /* 设置pop_con的隐藏，可以同时将弹框和背景隐藏起来 */ .pop_con&#123; display:none; &#125; &lt;/style&gt;HTML部分:&lt;h1&gt;网页内容&lt;/h1&gt;&lt;div class="pop_con" style="display:block"&gt; &lt;div class="pop"&gt; &lt;h3&gt;弹框标题&lt;/h3&gt; &lt;p&gt;弹框的文字内容&lt;/p&gt; &lt;/div&gt; &lt;div class="mask"&gt;&lt;/div&gt;&lt;/div&gt; 二. 页面嵌套 在一个页面中可以开一个局部的窗口，嵌入另外一个页面 制作这样的功能我们一般使用: iframe 标签来实现 12345使用方法: &lt;iframe src=&quot;&quot; frameborder=&quot;&quot;&gt;&lt;/iframe&gt; src: 设置另一个网页的地址 frameborder: 设置这个局部窗口边框的粗细 提升: iframe 可以和 a 标签搭配使用, 呈现切换的效果: 我们知道 a 标签有 target 属性: target=”_blank” : 新开一个浏览器窗口显示链接的页面 如果 target 的值和 iframe 的 name 值保持相同, 则 a 标签切换后的 href 将作用到 iframe 的 src 上: 12345&lt;a href=&quot;001.html&quot; target=&quot;name&quot;&gt;001页面&lt;/a&gt;&lt;a href=&quot;002.html&quot; target=&quot;name&quot;&gt;002页面&lt;/a&gt;&lt;a href=&quot;003.html&quot; target=&quot;name&quot;&gt;003页面&lt;/a&gt;&lt;iframe src=&quot;001.html&quot; frameborder=&quot;0&quot; name=&quot;name&quot;&gt;&lt;/iframe&gt; 三. 元素居中显示技巧1. 居中显示: 想要使某个元素能够居中显示, 需要设置其 margin 属性为: 0px auto: 123456789101112CSS部分:&lt;style&gt;.box&#123; width: 300px; height: 300px; background: gold; margin:0px auto;&#125;&lt;/style&gt;HTML部分: &lt;div class=&quot;box&quot;&gt;&lt;/div&gt; 总结: 如果想要某个元素居中, 则需要设置他的 margin : 0px auto; 多个元素想要居中, 则每个单独的元素都需要设置该属性. margin: 0px auto; =====&gt; margin: 0px auto 0px auto; (上, 右, 下, 左)]]></content>
      <categories>
        <category>前端 -css</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
        <tag>css position</tag>
        <tag>css iframe</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css属性进阶]]></title>
    <url>%2F2016%2F07%2F22%2F2016-7-23-css%E5%B1%9E%E6%80%A7%E8%BF%9B%E9%98%B6%2F</url>
    <content type="text"><![CDATA[CSS属性进阶1.文本常用样式属性进阶： text-align 设置文字水平对齐方式，如text-align:center 设置文字水平居中 text-indent 设置文字首行缩进，如：text-indent:32px; 设置文字首行缩进32px 1234567891011121314151617181920212223242526272829303132CSS部分: &lt;style&gt; .box &#123; width:80px; height:30px; background: pink; text-align: center; &#125; .pbox &#123; /* css里面默认的字体大小是16px */ font-size: 20px; text-indent: 32px; &#125;&lt;/style&gt;HTML部分:&lt;div class=&quot;box&quot;&gt; &lt;p&gt; 你好世界 &lt;/p&gt;&lt;/div&gt;&lt;p class=&quot;pbox&quot;&gt; 大头儿子小头爸爸 一对好朋友 快乐父子俩 儿子的头大手儿小 爸爸的头小手儿很大 大手牵小手 走路不怕滑 走呀走呀走 走 走 转眼儿子就长大 转眼儿子就长大&lt;/p&gt; 2. display属性 作用: 第一个决定了当前元素是否应该显示, 第二个决定了当前元素应该以什么类型显示 display 属性规定元素应该生成的框的类型。 display 的默认属性值是 inline, 此元素会被显示为内联元素 display属性是用来设置元素的类型及隐藏的，常用的属性有： none 元素隐藏且不占位置 block 此元素会被显示为块元素 inline 此元素会被显示为内联元素 inline-block 行内块元素 ( 了解 ) 123456789101112131415161718192021222324252627282930CSS部分: &lt;style&gt; div &#123; display: inline; &#125; a &#123; display: block; &#125; .pbox &#123; width: 200px; height: 200px; background: pink; display: none; &#125;&lt;/style&gt;HTML部分:&lt;div&gt; &lt;div&gt;我是要成为海贼王的男人&lt;/div&gt; &lt;div&gt;海贼王下面的div&lt;/div&gt; &lt;a href="#"&gt;这是第一个链接&lt;/a&gt; &lt;a href="#"&gt;这是第二个链接&lt;/a&gt; &lt;p class="pbox" style="display:block"&gt; 葫芦娃 葫芦娃 一根藤上七朵花 小小树藤是我家 啦啦啦啦 叮当当咚咚当当 浇不大 叮当当咚咚当当 是我家 啦啦啦啦 &lt;/p&gt;&lt;/div&gt; font: font: 样式属性是一个集合, 可以吧关于 font 的都放到这个属性里面: 1234567891011使用方法:&lt;style&gt; div &#123; font: bold italic 18px/20px arial; &#125;&lt;/style&gt;HTML部分:&lt;div&gt;这是div里面的文字&lt;/div&gt; 其中: arial 是一种字体, 和 微软雅黑一样. ​ font-size 和 font-family 的值是必需的。 font-style 定义字体的风格 normal: 正常 italic: 浏览器会显示一个2斜体的字体样式。 font-variant 能把字体变小一号并且全大写显示 small-caps 变小一号并且全大写显示 normal 正常 font-weight 是否加粗 bold 是加粗 normal 正常 font-size/line-height 字体大小 / 行高大小 font-family 字体类型 3. CSS元素溢出 当子元素的尺寸超过父元素的尺寸时，需要设置父元素显示溢出的子元素的方式，设置的方法是通过overflow属性来设置。 overflow的设置项： 1、visible 默认值。内容不会被修剪，会呈现在元素框之外。 2、hidden 内容会被修剪，并且其余内容是不可见的。 3、scroll 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。 4、auto 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。 123456789101112131415161718CSS部分: &lt;style&gt; div &#123; width:100px; height:100px; overflow: auto; &#125;&lt;/style&gt;HTML部分:&lt;div&gt; 格叽格叽~ &lt;br&gt;&lt;br&gt; 格叽格叽~~ &lt;br&gt;&lt;br&gt; 格叽~格叽~~ &lt;br&gt;&lt;br&gt;&lt;/div&gt;]]></content>
      <categories>
        <category>前端 - css</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
        <tag>css display</tag>
        <tag>css orveflow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML列表&表单&表格]]></title>
    <url>%2F2016%2F07%2F22%2F2016-7-22-HTML%E5%88%97%E8%A1%A8-%E8%A1%A8%E5%8D%95-%E8%A1%A8%E6%A0%BC%2F</url>
    <content type="text"><![CDATA[概述​ 我们在写页面的时候经常会使用列表标签，用来布局文章的标题列表、菜单等，在前端页面中, 往往用表单来制作用户的注册, 登录等功能，本章会讲解列表标签和表单标签的简单如何，以及相关样式 一. 列表 标签 前端中列表分为两种: 有序列表 无序列表 1. 无序列表无序列表一般应用在布局中的新闻标题列表和文章标题列表以及菜单，它是含有语义的，标签结构如下： 12345678使用方式: ul&gt;li&#123;列表标题&#125;*3&lt;ul&gt; &lt;li&gt;列表标题&lt;/li&gt; &lt;li&gt;列表标题&lt;/li&gt; &lt;li&gt;列表标题&lt;/li&gt;&lt;/ul&gt; 列表的内容一般是可以链接的，点击链接到新闻或者文章的具体内容，所以具体结构一般是这样的： 1234567ul&gt;(li&gt;a[href=#]&#123;列表标题 $&#125;)*3&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;列表标题 1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;列表标题 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;列表标题 3&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 显示效果: 2. 有序列表1234567使用方式: ol&gt;li&#123;列表标题&#125;*3&lt;ol&gt; &lt;li&gt;列表标题&lt;/li&gt; &lt;li&gt;列表标题&lt;/li&gt; &lt;li&gt;列表标题&lt;/li&gt;&lt;/ol&gt; 显示效果: 请进行如下的 emmet 语法练习: 1.box&gt;.box1+.box2 1#page&gt;div.logo+ul#navigation&gt;li*5&gt;a&#123;Item $&#125; 1div#header+div.page+div#footer.class1.class2.class3 总结: 我们在写页面的时候经常会使用列表标签 写列表标签的时候, 我们可以去掉前面的点或者是序号: 12345&lt;style&gt; li &#123; list-style:none; /* 取消列表前面的序号或者是点 */ &#125;&lt;/style&gt; 写所有 html 页面的时候, 都可以使用 emmet 语法 二. HTML表单表单用于搜集不同类型的用户输入，表单由不同类型的标签组成，相关标签及属性用法如下： 1、&lt;form&gt;标签 定义整体的表单区域 action属性 定义表单数据提交地址 method属性 定义表单提交的方式，一般有“get”方式和“post”方式 12345使用方式:&lt;form action=&quot;&quot; method=&quot;&quot;&gt; &lt;/form&gt; 2、&lt;label&gt;标签 为表单元素定义文字标注 label 的 for 属性值可以和 input 的 id 名书写一致, 使 label 的点击也能够触发 input 的聚焦 1234567label的使用方式:&lt;label for=&quot;&quot;&gt;Male&lt;/label&gt;&lt;label for=&quot;&quot;&gt;Female&lt;/label&gt;label的for属性设置: &lt;label for=&quot;male&quot;&gt;用户名:&lt;input type=&quot;text&quot; id=&quot;male&quot;&gt; 3、&lt;input&gt;标签 定义通用的表单元素 type属性 type=”text” 定义单行文本输入框 type=”password” 定义密码输入框 type=”radio” 定义单选框 type=”checkbox” 定义复选框 type=”file” 定义上传文件 type=”submit” 定义提交按钮 type=”reset” 定义重置按钮 type=”button” 定义一个普通按钮 value属性 定义表单元素的值 name属性 定义表单元素的名称，此名称是提交数据时的键名 12345678910111213141516使用方法:&lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;请您输入姓名&quot;&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;1&quot;&gt; 男&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;0&quot;&gt; 女&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;1&quot;&gt; 唱歌&lt;input type=&quot;file&quot; name=&quot;file&quot;&gt; &lt;input type=&quot;submit&quot;&gt;&lt;input type=&quot;reset&quot;&gt;&lt;input type=&quot;button&quot; value=&quot;按钮1&quot;&gt; 4、&lt;textarea&gt;标签 定义多行文本输入框 1234使用方法:&lt;textarea name=&quot;&quot; placeholder=&quot;提示信息...&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt; textarea的使用&lt;/textarea&gt; 5、&lt;select&gt;标签 定义下拉表单元素 6、&lt;option&gt;标签 与&lt;select&gt;标签配合，定义下拉表单元素中的选项 123456789使用方法: 创建带有 4 个选项的选择列表：&lt;select name=&quot;province&quot; id=&quot;&quot;&gt; &lt;option value=&quot;1&quot;&gt;北京&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;河北&lt;/option&gt; &lt;option value=&quot;3&quot;&gt;河南&lt;/option&gt; &lt;option value=&quot;4&quot;&gt;湖北&lt;/option&gt;&lt;/select&gt; 练习: 注册表单实例： 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;form action="http://www..." method="get"&gt; &lt;p&gt; &lt;label&gt;姓名：&lt;/label&gt; &lt;input type="text" name="username" /&gt; &lt;/p&gt; &lt;p&gt; &lt;label&gt;密码：&lt;/label&gt; &lt;input type="password" name="password" /&gt; &lt;/p&gt; &lt;p&gt; &lt;label&gt;性别：&lt;/label&gt; &lt;input type="radio" name="gender" value="0" /&gt; 男 &lt;input type="radio" name="gender" value="1" /&gt; 女 &lt;/p&gt; &lt;p&gt; &lt;label&gt;爱好：&lt;/label&gt; &lt;input type="checkbox" name="like" value="sing" /&gt; 唱歌 &lt;input type="checkbox" name="like" value="run" /&gt; 跑步 &lt;input type="checkbox" name="like" value="swiming" /&gt; 游泳 &lt;/p&gt; &lt;p&gt; &lt;label&gt;照片：&lt;/label&gt; &lt;input type="file" name="person_pic"&gt; &lt;/p&gt; &lt;p&gt; &lt;label&gt;个人描述：&lt;/label&gt; &lt;textarea name="about"&gt;&lt;/textarea&gt; &lt;/p&gt; &lt;p&gt; &lt;label&gt;籍贯：&lt;/label&gt; &lt;select name="site"&gt; &lt;option value="0"&gt;北京&lt;/option&gt; &lt;option value="1"&gt;上海&lt;/option&gt; &lt;option value="2"&gt;广州&lt;/option&gt; &lt;option value="3"&gt;深圳&lt;/option&gt; &lt;/select&gt; &lt;/p&gt; &lt;p&gt; &lt;input type="submit" name="" value="提交"&gt; &lt;input type="reset" name="" value="重置"&gt; &lt;/p&gt;&lt;/form&gt; 单行文本框文字提示 placeholder 设置input输入框的默认提示文字。 总结: 在前端页面中, 我们往往用表单来制作用户的注册, 登录等功能. 表单包含很多内容, 例如: 单选: radio 多选: checkbox 密码: password 文本: text 按钮: reset, submit, file 多行文本输入: textarea 下拉菜单: select option 表单( form )可以直接提交: 提交方法包含 get post action: 提交的服务器地址 method: 提交的方法 三. 表格元素及相关样式1、&lt;table&gt;标签 声明一个表格 2、&lt;tr&gt;标签 定义表格中的行 3、&lt;td&gt;和&lt;th&gt;标签 定义列以及列中的标题 td代表列，th表示列中的标题部分(加粗) 它们的常用属性如下： colspan 设置单元格水平合并，设置值是数值 rowspan 设置单元格垂直合并，设置值是数值 表格相关样式属性 border-collapse 设置表格的边线合并，如：border-collapse:collapse; border=’1’ 可以设置table的边框大小 text-align 可以设置对齐方式: left right center 总结: 在网页中, 表格用一般用 table 标签来做 表格中分为 行 和 列 表格中的行为 tr 标签 表格中的列为 td 标签 其中每一列都可以有一个标题, 我们可以使用 th 标签 1234567891011121314&lt;table&gt; &lt;tr&gt; &lt;th&gt;标题一&lt;/th&gt; &lt;th&gt;标题二&lt;/th&gt; &lt;th&gt;标题三&lt;/th&gt; &lt;th&gt;标题四&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;4&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;]]></content>
      <categories>
        <category>前端 - html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>csss</tag>
        <tag>li、form、table标签</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS简明教程（三）]]></title>
    <url>%2F2016%2F07%2F21%2F2016-7-21-CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[概述本章介绍css内外边距的定义，并引入盒子模型的概念 1.CSS–内外边距 margin: 用于控制元素与元素之间的距离, margin的最基本用途就是控制元素周围空间的间隔,从视觉角度上达到互相隔开的目的 padding: 用于控制内容与边框之间的距离 border(边框): 围绕在内边距和内容外的边框 content(内容): 盒子的内容, 显示文本和图像. 重要提示: ​ 当你指定一个CSS元素的宽度和高度属性时, 你只是设置内容区域的宽度和高度. ​ 完全大小的元素, 你还必须加上内边距, 边框和外边距. 12345678910111213141516171819&lt;style&gt; .div1 &#123; width: 100px; height: 100px; background-color: pink; border: 40px solid blue; padding: 40px; &#125; .div2 &#123; width: 100px; height: 100px; background-color: lightblue; border: 1px solid red; &#125;&lt;/style&gt;&lt;div class="div1"&gt;hello div1&lt;/div&gt;&lt;div class="div2"&gt;hello div222&lt;/div&gt; 如果上下两个元素都有设置相对的margin值, 则选择大的添加, 小的不添加.这个称谓margin兄弟塌陷 margin父子塌陷问题: 如果父级 div 中没有 border, padding, inline content(文本), 子级 div 的 margin 会一直往上找,直到找到某个标签包括 border, padding, inline content(文本) 中的其中一个, 然后按此 div 进行 margin. 123456789101112131415161718192021222324252627282930313233343536&lt;style&gt; .div1 &#123; width:200px; height:200px; background-color: pink; border: 20px solid red; padding: 5px; margin-bottom: 40px; &#125; .div2 &#123; width:200px; height:200px; background-color: blue; border: 20px solid red; padding: 5px; margin-top: 40px; &#125; .outer &#123; height: 1000px; background-color: lightblue; &#125; .box &#123; width:100px; height:100px; background-color: orange; &#125;&lt;/style&gt;&lt;div class="box"&gt;&lt;/div&gt;&lt;div class="outer"&gt; &lt;div class="div1"&gt;hello div1&lt;/div&gt; &lt;div class="div2"&gt;hello div2&lt;/div&gt;&lt;/div&gt; 补充说明: background-color 背景颜色 background-image 背景图片 background-repeat 背景重复 我们可以对上面的代码进行合并书写: background: url(bgimg.gif) no-repeat 5px 5px; 2.CSS盒子模型盒子模型解释 元素在页面中显示成一个方块，类似一个盒子，CSS盒子模型就是使用现实中盒子来做比喻，帮助我们设置元素对应的样式。盒子模型示意图如下： 把元素叫做盒子，设置对应的样式分别为：盒子的宽度(width)、盒子的高度(height)、盒子的边框(border)、盒子内的内容和边框之间的间距(padding)、盒子与盒子之间的间距(margin)。 设置宽高 width height 12width:200px; /* 设置盒子的宽度，此宽度是指盒子内容的宽度，不是盒子整体宽度(难点) */ height:200px; /* 设置盒子的高度，此高度是指盒子内容的高度，不是盒子整体高度(难点) */ 设置边框 border 设置一边的边框，比如顶部边框，可以按如下设置： 1border-top:10px solid red; 其中10px表示线框的粗细；solid表示线性。 设置其它三个边的方法和上面一样，把上面的’top’换成’left’就是设置左边，换成’right’就是设置右边，换成’bottom’就是设置底边。 四个边如果设置一样，可以将四个边的设置合并成一句： 1border:10px solid red; 设置内间距 padding 设置盒子四边的内间距，可设置如下： 1234padding-top：20px; /* 设置顶部内间距20px */ padding-left:30px; /* 设置左边内间距30px */ padding-right:40px; /* 设置右边内间距40px */ padding-bottom:50px; /* 设置底部内间距50px */ 上面的设置可以简写如下： 12/* 四个值按照顺时针方向，分别设置的是 上 右 下 左 四个方向的内边距值。 */padding：20px 40px 50px 30px; padding后面还可以跟3个值，2个值和1个值，它们分别设置的项目如下： 123padding：20px 40px 50px; /* 设置顶部内边距为20px，左右内边距为40px，底部内边距为50px */ padding：20px 40px; /* 设置上下内边距为20px，左右内边距为40px*/ padding：20px; /* 设置四边内边距为20px */ 设置外间距margin外边距的设置方法和padding的设置方法相同，将上面设置项中的’padding’换成’margin’就是外边距设置方法。 外间距居中技巧如果子元素是块元素，且它的宽度小于父元素，可以将子元素左右设置auto来水平居中子元素 12/* 子元素上下外边距设为0，左右设置为auto */margin:0px auto; 盒子的真实尺寸盒子的width和height值固定时，如果盒子增加border和padding，盒子整体的尺寸会变大，所以盒子的真实尺寸为： 盒子宽度 = width + padding左右 + border左右 盒子高度 = height + padding上下 + border上下]]></content>
      <categories>
        <category>前端 - css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>盒子模型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css简明教程（二）]]></title>
    <url>%2F2016%2F07%2F20%2F2016-7-20-css%E4%B8%8B%2F</url>
    <content type="text"><![CDATA[概述​ 本章将介绍CSS 布局、文本常用的一些属性，以及float属性，还有一个简单的布局案例演示 1.布局常用属性样式: 属性 作用 举例 width 设置元素(标签)的宽度 width: 200px; height 设置元素(标签)的高度 height: 200px; background 设置元素背景色或者背景图片(详看下面) background: pink; border 设置元素四周的边框 border: 1px solid pink; border-top 设置元素顶部边框 border-top: 1px solid/ dashed pink; border-left 设置元素左边边框 border-left: 1px solid pink; border-right 设置元素右边边框 border-right: 1px solid pink; border-bottom 设置元素底部边框 border-bottom: 1px solid pink; 2.文本常用样式属性: color 设置文字的颜色 color: red; font-size 设置文字的大小 font-size: 12px; font-family 设置文字的字体 font-family: ‘Microsoft Yahei’; (微软雅黑) font-weight 设置文字是否加粗 font-weight: bold; (bold:加粗 normal: 正常) line-height 设置文字的行高 line-height: 24px; (文字高度加上文字上下间距共计24px) text-decoration 设置文字的下划线 text-decoration:none; (取消下划线) 提示:样式中的注释 123456/* 设置头部的样式 */.header&#123; width:960px; height:80px; background:gold;&#125; 3.浮动: ( float ) 我们有时候为了让一行能够显示多个元素, 会设置元素的float属性: 先来回顾一下 block 元素和 inline 元素在页面中的排列方式: block 元素通常被实现为独立的一块, 独占一行, 多个 block 元素会各自新起一行, 默认 block 元素宽度自动填满其父元素宽度. block 元素可以设置 width, height, margin, padding 属性. inline 元素不会独占一行, 多个相邻的行内元素会排列在一行里, 知道一行排列不下, 才会新换一行, 其宽度随元素的内容而变化. inline 元素设置width, height属性无效. inline 元素的margin 和 padding 属性. 水平方向的padding-left, padding-right, margin-left, margin-right 都产生边距效果; 但竖直方向的padding-top, padding-bottom, margin-top, margin-bottom 不会产生边距效果. 常见的块级元素有 div, form , table, p, h1~h5, ol, ul等 常见的内联元素有 span, a, strong, em, label, input, select, textarea, img, br等. 只有绝对定位( absolute )和浮动( float ) 才会脱离文档流 需要注意的是: 使用 float 脱离文档流时, 其他盒子会无视这个元素, 但其他盒子内的文本依然会为这个元素让出位置, 环绕在周围(可以说是部分无视). 而对于使用 position:absolute 脱离文档流的元素, 其他盒子与其他盒子内的文本都会无视它(可以说是完全无视) 浮动的表现 : ​ 定义: 浮动的框可以向左或向右移动, 直到它的外边缘碰到包含框或另一个浮动框的边框为止. 由于浮动框不在文档的普通流中,所以文档的普通流中的浮动框之后的块框表现的就像浮动框不存在一样. (注意 这里是块框而不是内联元素; 浮动框只对它后面的元素造成影响 ) 注意: 当初float 被设计的时候就是用来完成文本环绕的效果, 所以文本不会被挡住, 这是 float 的特性, 即 float 是一种不彻底的脱离文档流的方式. 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .div1 &#123; width: 100px; height: 100px; background-color: pink; &#125; .div2 &#123; width: 200px; height: 100px; background-color: blue; &#125; .div3 &#123; width: 100px; height: 200px; background-color: green; &#125; .div4 &#123; width: 200px; height: 200px; background-color: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="div1"&gt;&lt;/div&gt; &lt;div class="div2"&gt;&lt;/div&gt; &lt;div class="div3"&gt;&lt;/div&gt; &lt;div class="div4"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 特别注意 设置某一个元素为float 之后, 当前元素是否往前一个位置飘动,取决于上一个元素是否设置了float,如果设置了则飘动,如果没有设置,则还是在原来的位置, 只是飘起来, 不飘动. 如果一个容器中有两个子元素, 两个子元素都设置浮动浮起来之后,则容器会被压缩为一点. 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .box &#123; width: 300px; background-color: pink; &#125; .sub1 &#123; width: 100px; height: 100px; background-color: limegreen; float: left; &#125; .sub2 &#123; width: 100px; height: 100px; background-color: olive; float: left; &#125; .box2 &#123; width: 400px; height: 30px; background-color: orangered; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt; &lt;div class="sub1"&gt;&lt;/div&gt; &lt;div class="sub2"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="box2"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 补充: 浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。 由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。 2. CSS布局演示通过样式,并且参照下图, 可以把之前写的布局作进一步的调整, 完成最终的布局效果: 参考文字: 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。人工智能是计算机科学的一个分支，它企图了解智能的实质，并生产出一种新的能以人类智能相似的方式做出反应的智能机器，该领域的研究包括机器人、语言识别、图像识别、自然语言处理和专家系统等。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .box &#123; width:285px; height: 310px; border-bottom: 1px solid #c8dcf2; border-top: 1px solid #c8dcf2; &#125; .header &#123; width:285px; height: 40px; &#125; .header h3 &#123; margin:0px; font-family: 'Microsoft Yahei'; font-size: 16px; color: #172c45; line-height: 40px; float: left; &#125; .header a &#123; font-size: 12px; font-family: 'Microsoft Yahei'; color: #172c45; text-decoration: none; float: right; line-height: 40px; &#125; p &#123; font-size: 12px; font-family: 'Microsoft Yahei'; color: #737373; line-height: 20px; height:190px; width: 100%; &#125; img &#123; height:80px; width:100%; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt; &lt;div class="header"&gt; &lt;h3&gt;今日头条&lt;/h3&gt; &lt;a href="#"&gt;更多&amp;gt;&amp;gt;&lt;/a&gt; &lt;/div&gt; &lt;img src="./images/banner.jpg" alt="banner"&gt; &lt;p&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。人工智能是计算机科学的一个分支，它企图了解智能的实质，并生产出一种新的能以人类智能相似的方式做出反应的智能机器，该领域的研究包括机器人、语言识别、图像识别、自然语言处理和专家系统等。 &lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>前端 - css</category>
      </categories>
      <tags>
        <tag>css布局属性</tag>
        <tag>css文本属性</tag>
        <tag>浮动</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css简明教程（一）]]></title>
    <url>%2F2016%2F07%2F20%2F2016-7-20-css%E4%B8%8A%2F</url>
    <content type="text"><![CDATA[概述 ​ 为了让网页元素的样式更加的丰富, 也为了让网页的内容和样式能拆分开, CSS由此而诞生. CSS是 Cascading Style Sheets 的首写字母缩写,意思是层叠样式表. 有了CSS, html 中大部分表现样式的标签就废弃不用了, html只负责文档的结构和内容, 表现形式完全交给CSS, 这样使得html文档变得更加简洁. 1. CSS基本语法1234567CSS使用格式:选择器 &#123; 属性 : 值; 属性 : 值; ...&#125; 说明: 选择器是将样式和页面元素关联起来的名称 属性名是希望设置的样式属性, 每个属性有一个或者多个值 属性和值之间用冒号隔开 一个属性和值与下一个属性和值之间用分号, 最后一个分号可以省略. 例如: 12345div &#123; width: 100px; height: 100px; background: gold;&#125; 2. CSS引入方法 CSS样式导入HTML中有三种方式 1.内联式: 通过标签的 style 属性, 在标签上直接写样式. 123&lt;div style=&quot;width:100px; height:100px; background:red;&quot;&gt; 这是个div标签&lt;/div&gt; 2. 嵌入式: 通过 style 标签, 在网页上创建嵌入的样式表. 123456789&lt;head&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width: 100px; height: 100px; background: red; &#125; &lt;/style&gt;&lt;/head&gt; 3.外联式: 1&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/样式文件名.css&quot;&gt; 3. CSS选择器 CSS选择器: 帮助我们找寻标签, 找到之后 添加样式 CSS 的四种基本选择器: 通用选择器 ( * ) 标签选择器 ( 标签名 ) 类选择器 ( class ) id 选择器 ( id ) CSS 组合选择器: 多元素选择器 后代选择器(层级) 子元素选择器 兄弟选择器 CSS 属性选择器: 属性选择器 3.1 基础选择器:1. 通用选择器 通用选择器, 匹配任何元素: 1234567使用格式:* &#123; 属性名: 值; 属性名: 值; ...&#125; 例如: 1234* &#123; margin: 0px; padding: 0px;&#125; 有些标签自动会增加一些内边距和外边距等样式, 我们可以使用这个选择器把默认的都给去掉 2.标签选择器 标签选择器, 此种选择器影响范围大, 一般用来做一些通用设置, 或用在层级选择器中. 123456通用格式:标签名 &#123; 属性名: 值; ...&#125; 例如: 123456789101112131415CSS部分:&lt;style&gt; div &#123; color: red; &#125; p &#123; font-size: 18px; &#125;&lt;/style&gt;HTML部分:&lt;div&gt;这里是html部分&lt;/div&gt;&lt;p&gt;html区域的p标签&lt;/p&gt; 一旦使用标签选择器,则当前页面上的所有该标签全部都有该样式. 这一点需要注意 3.类选择器 通过类名来选择元素, 一个类可应用于多个元素, 一个元素上也可以使用多个类 应用灵活, 可复用, 是css中应用最多的一种选择器 123456常见格式:.类名 &#123; 属性名: 值; ...&#125; 举例: 12345678910111213141516171819202122232425CSS部分:&lt;style&gt; .blue &#123; color: blue; &#125; .header &#123; font-size: 19px; &#125; .box &#123; color:orange; &#125; /* 这是CSS注释的写法,可以作为单行注释,也可以作为多行注释 */ /* 针对下面的代码, 如果我们想单独选中div, 则可以这样写: */ div.blue &#123; /*文字变为斜体*/ font-style: italic; &#125;&lt;/style&gt;HTML部分:&lt;div&gt;这是div标签&lt;/div&gt;&lt;div class="blue"&gt;这个标签的字体颜色会变成蓝色,是因为class选择器&lt;/div&gt;&lt;p class="blue"&gt;这是div下面的p标签,也会变成蓝色,因为用的是同样的选择器,名字也一样&lt;/p&gt;&lt;h3 class="blue header box"&gt;这个标签有好多个class类名, 则都会加载不同类名下面的样式, 形成重叠效果&lt;/h3&gt;&lt;p class="header"&gt;这个标签的类名和上面的有一样的,所以上面的header样式也会加载在这个标签上&lt;/p&gt; 4. id选择器 通过 id 名来选择元素，元素的 id 名称不能重复，所以一个样式设置项只能对应于页面上一个元素，不能复用，id 名一般给程序使用，所以不推荐使用id作为选择器。 12345使用格式:#ID名 &#123; 属性名: 值&#125; 举例： 123456789101112131415CSS部分: &lt;style&gt; #box &#123; color:red &#125; #box1 &#123; background:blue; &#125;&lt;/style&gt;HTML部分:&lt;p id="box"&gt;这是第一个段落标签&lt;/p&gt; &lt;p id="box1"&gt;这是第二个段落标签&lt;/p&gt; &lt;p&gt;这是第三个段落标签&lt;/p&gt; 3.2 组合选择器1. 多元素选择器 同时匹配所有 E元素 和 F元素, E和F之间用逗号分隔: 1234567使用格式: E,F &#123; 属性名: 值; 属性名: 值; ...&#125; 例如: 123456789101112CSS部分:&lt;style&gt; .box,p &#123; color: red; &#125;&lt;/style&gt;HTML部分:&lt;div class="box"&gt;这是一个美丽的div&lt;/div&gt;&lt;p&gt;美丽div下面的段落标签p&lt;/p&gt; 2.后代选择器: 主要应用在标签嵌套的结构中,层级选择器, 是结合上面两种选择器来写的选择器, 它可与标签选择器结合使用,减少命名,同时也可以通过层级, 限制样式的作用范围 1234567使用方式:E F &#123; 属性名: 值; 属性名: 值; ...&#125; 例如: 1234567891011121314151617181920212223CSS部分:&lt;style&gt; .con &#123; width: 100px; height: 100px; &#125; div p &#123; color: red; &#125; .con .pbox &#123; color: pink; &#125;&lt;/style&gt;HTML部分:&lt;div class="con"&gt; &lt;p&gt;这里是span标签的内容&lt;/p&gt; &lt;div class="pink"&gt; 这里是div中的div标签 &lt;p class="pbox"&gt;粉红色啊粉红色&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 层级选择器: 按照标签的层级来匹配对应的标签 3. 子代选择器 E &gt; F 匹配所有 E元素的 子元素F 1234567使用格式: E &gt; F &#123; 属性名: 值; 属性名: 值; ...&#125; 例如: 123456789101112131415161718192021222324252627CSS部分:&lt;style&gt; div&gt;p &#123; color: red; &#125; div&gt;div&#123; font-size:30px; &#125; /* 选中了a标签, 但是div内部的内容是没有改变的,说明可以确切的选中某一个 */ .box&gt;a &#123; background: pink; &#125;&lt;/style&gt;HTML部分:&lt;div class="con"&gt; &lt;p&gt;这是div元素的子集p元素&lt;/p&gt; &lt;div class="box"&gt; div标签的内容部分 &lt;a href="#"&gt;第二个div的子集:a元素&lt;/a&gt; &lt;/div&gt;&lt;/div&gt; 4. 毗邻选择器 匹配所有紧随 E元素 之后的同级元素F (向下寻找) 1234567使用格式: E + F &#123; 属性名: 值; 属性名: 值; ...&#125; 例如: 123456789101112CSS部分:&lt;style&gt; .box + div &#123; color: red; &#125;&lt;/style&gt;HTML部分:&lt;div&gt;第一个div,啦啦啦~&lt;/div&gt;&lt;div class="box"&gt;第二个div,啦啦啦~&lt;/div&gt;&lt;div&gt;第三个div,啦啦啦~&lt;/div&gt; 3. 3 属性选择器1. 第一种属性选择器的使用 12345678910使用方法: [attr] &#123; 属性名: 值; 属性名: 值; ...&#125;[title] &#123; &#125; 例如: 123456789101112CSS部分:&lt;style&gt; [name] &#123; color: red; &#125;&lt;/style&gt;HTML部分: &lt;div&gt; hello1 &lt;/div&gt;&lt;div name="peter"&gt; hello1 &lt;/div&gt;&lt;div title="haha"&gt; hello1 &lt;/div&gt;&lt;div&gt; hello1 &lt;/div&gt; 2. 第二种属性选择器的使用 1234567使用方法:E[attr=val] &#123; 属性名: 值; 属性名: 值; ...&#125; 例如: 123456789101112CSS部分:&lt;style&gt; [name="peter"] &#123; color: red; &#125;&lt;/style&gt;HTML部分: &lt;div&gt; hello1 &lt;/div&gt;&lt;div name="peter"&gt; hello1 &lt;/div&gt;&lt;div name="bill"&gt; hello1 &lt;/div&gt;&lt;div&gt; hello1 &lt;/div&gt; 3.4 伪类选择器1. 伪类选择器 常用的伪类选择器有hover，表示鼠标悬浮在元素上时的状态。 12345678910111213141516171819202122CSS部分: &lt;style&gt; .box1 &#123; width:100px; height:100px; background:gold; &#125; .box1:hover &#123; width:300px; &#125;&lt;/style&gt;HTML部分: &lt;div class="box1"&gt;别看村子不咋大呀， 有山有水有树林， 邻里相亲多和睦， 老少爷们也合群&lt;/div&gt;补充: #input:focus &#123; outline: none; border: 2px solid red;&#125; 总结: CSS 选择器的主要目的是: 获取 HTML 元素, 获取到后给当前元素添加样式. CSS 选择器的种类非常多, 一般我们用不上, 把常用的学会即可. 标签选择器尽量少用, 覆盖面巨大. 不利于我们样式的单独调整. class 类选择器是经常使用的选择器. 可以多多练习 层级选择器 一般配合类选择器或者其他的选择器一起使用. 常用来获取大容器里面没有明确定义类名的元素 id 选择器偶尔使用, 使用它往往就是利用他的唯一性. 获取单个某个标签使用. 伪类选择器是需要设置特殊阶段的效果时, 添加的选择器, 知道即可 1234567891011121314151617181920212223&lt;html&gt; &lt;head&gt; &lt;style type="text/css"&gt; a:link &#123;color: red&#125; /* 未访问时的状态 */ a:visited &#123;color: orange&#125; /* 已访问过的状态 */ a:hover &#123;color: pink&#125; /* 鼠标移动到链接上时的状态 */ a:active &#123;color: yellow&#125; /* 鼠标按下去时的状态 */ &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt; &lt;b&gt;&lt;a href="/index.html" target="_blank"&gt;这是一个链接。&lt;/a&gt;&lt;/b&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;注释：&lt;/b&gt; 在 CSS 定义中，a:hover 必须位于 a:link 和 a:visited 之后，这样才能生效！ &lt;/p&gt; &lt;p&gt; &lt;b&gt;注释：&lt;/b&gt; 在 CSS 定义中，a:active 必须位于 a:hover 之后，这样才能生效！ &lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 注意嵌套规则: 块级元素 可以包含内联元素或某些块级元素, 但是内联元素不能包含块级元素,它只能包含其他内联元素 有几个特殊的块级元素只能包含内联元素,不能包含块级元素. 如h1, h2, h3, h4, h5, h6, p li 内可以包含 div 块级元素与块级元素并列 , 内联元素与内联元素并列. 4. 初始化CSS为什么要初始化CSS？ ​ 建站老手都知道，这是为了考虑到浏览器的兼容问题，其实不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面差异。当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。 ​ 最简单的初始化方法就是： {padding: 0; margin: 0;} 。有很多人也是这样写的。这确实很简单，但有人就会感到疑问：号这样一个通用符在编写代码的时候是快，但如果网站很大，CSS样式表文件很大，这样写的话，他会把所有的标签都初始化一遍，这样就大大的加强了网站运行的负载，会使网站加载的时候需要很长一段时间。 ​ 写过css的都知道每个网页引进的css首先都需要初始化，而出名的css reset有YUI css reset（QQ、淘宝等都出现他的影子），业内用的最多的还有Erik Meyer’s CSS Reset。 ​ CSS初始化是指重设浏览器的样式。不同的浏览器默认的样式可能不尽相同，所以开发时的第一件事可能就是如何把它们统一。如果没对CSS初始化往往会出现浏览器之间的页面差异。每次新开发网站或新网页时候通过初始化CSS样式的属性，为我们将用到的CSS或html标签更加方便准确，使得我们开发网页内容时更加方便简洁，同时减少CSS代码量，节约网页下载时间。 ​ 雅虎工程师提供的CSS初始化示例代码 ​ body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,button,textarea,p,blockquote,th,td { margin:0; padding:0; } 4. CSS进阶布局常用属性样式: 属性 作用 举例 width 设置元素(标签)的宽度 width: 200px; height 设置元素(标签)的高度 height: 200px; background 设置元素背景色或者背景图片(详看下面) background: pink; border 设置元素四周的边框 border: 1px solid pink; border-top 设置元素顶部边框 border-top: 1px solid/ dashed pink; border-left 设置元素左边边框 border-left: 1px solid pink; border-right 设置元素右边边框 border-right: 1px solid pink; border-bottom 设置元素底部边框 border-bottom: 1px solid pink; 文本常用样式属性: color 设置文字的颜色 color: red; font-size 设置文字的大小 font-size: 12px; font-family 设置文字的字体 font-family: ‘Microsoft Yahei’; (微软雅黑) font-weight 设置文字是否加粗 font-weight: bold; (bold:加粗 normal: 正常) line-height 设置文字的行高 line-height: 24px; (文字高度加上文字上下间距共计24px) text-decoration 设置文字的下划线 text-decoration:none; (取消下划线) 提示:样式中的注释 123456/* 设置头部的样式 */.header&#123; width:960px; height:80px; background:gold;&#125; 浮动: ( float ) 我们有时候为了让一行能够显示多个元素, 会设置元素的float属性: 先来回顾一下 block 元素和 inline 元素在页面中的排列方式: block 元素通常被实现为独立的一块, 独占一行, 多个 block 元素会各自新起一行, 默认 block 元素宽度自动填满其父元素宽度. block 元素可以设置 width, height, margin, padding 属性. inline 元素不会独占一行, 多个相邻的行内元素会排列在一行里, 知道一行排列不下, 才会新换一行, 其宽度随元素的内容而变化. inline 元素设置width, height属性无效. inline 元素的margin 和 padding 属性. 水平方向的padding-left, padding-right, margin-left, margin-right 都产生边距效果; 但竖直方向的padding-top, padding-bottom, margin-top, margin-bottom 不会产生边距效果. 常见的块级元素有 div, form , table, p, h1~h5, ol, ul等 常见的内联元素有 span, a, strong, em, label, input, select, textarea, img, br等. 只有绝对定位( absolute )和浮动( float ) 才会脱离文档流 需要注意的是: 使用 float 脱离文档流时, 其他盒子会无视这个元素, 但其他盒子内的文本依然会为这个元素让出位置, 环绕在周围(可以说是部分无视). 而对于使用 position:absolute 脱离文档流的元素, 其他盒子与其他盒子内的文本都会无视它(可以说是完全无视) 浮动的表现 : ​ 定义: 浮动的框可以向左或向右移动, 直到它的外边缘碰到包含框或另一个浮动框的边框为止. 由于浮动框不在文档的普通流中,所以文档的普通流中的浮动框之后的块框表现的就像浮动框不存在一样. (注意 这里是块框而不是内联元素; 浮动框只对它后面的元素造成影响 ) 注意: 当初float 被设计的时候就是用来完成文本环绕的效果, 所以文本不会被挡住, 这是 float 的特性, 即 float 是一种不彻底的脱离文档流的方式. 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .div1 &#123; width: 100px; height: 100px; background-color: pink; &#125; .div2 &#123; width: 200px; height: 100px; background-color: blue; &#125; .div3 &#123; width: 100px; height: 200px; background-color: green; &#125; .div4 &#123; width: 200px; height: 200px; background-color: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="div1"&gt;&lt;/div&gt; &lt;div class="div2"&gt;&lt;/div&gt; &lt;div class="div3"&gt;&lt;/div&gt; &lt;div class="div4"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 特别注意 设置某一个元素为float 之后, 当前元素是否往前一个位置飘动,取决于上一个元素是否设置了float,如果设置了则飘动,如果没有设置,则还是在原来的位置, 只是飘起来, 不飘动. 如果一个容器中有两个子元素, 两个子元素都设置浮动浮起来之后,则容器会被压缩为一点. 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .box &#123; width: 300px; background-color: pink; &#125; .sub1 &#123; width: 100px; height: 100px; background-color: limegreen; float: left; &#125; .sub2 &#123; width: 100px; height: 100px; background-color: olive; float: left; &#125; .box2 &#123; width: 400px; height: 30px; background-color: orangered; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt; &lt;div class="sub1"&gt;&lt;/div&gt; &lt;div class="sub2"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="box2"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 补充: 浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。 由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。 css 浮动: 请看下图，当把框 1 向右浮动时，它脱离文档流并且向右移动，直到它的右边缘碰到包含框的右边缘： 再请看下图，当框 1 向左浮动时，它脱离文档流并且向左移动，直到它的左边缘碰到包含框的左边缘。因为它不再处于文档流中，所以它不占据空间，实际上覆盖住了框 2，使框 2 从视图中消失。 如果把所有三个框都向左移动，那么框 1 向左浮动直到碰到包含框，另外两个框向左浮动直到碰到前一个浮动框。 如下图所示，如果包含框太窄，无法容纳水平排列的三个浮动元素，那么其它浮动块向下移动，直到有足够的空间。如果浮动元素的高度不同，那么当它们向下移动时可能被其它浮动元素“卡住”： 5. CSS布局演示通过样式,并且参照下图, 可以把之前写的布局作进一步的调整, 完成最终的布局效果: 参考文字: 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。人工智能是计算机科学的一个分支，它企图了解智能的实质，并生产出一种新的能以人类智能相似的方式做出反应的智能机器，该领域的研究包括机器人、语言识别、图像识别、自然语言处理和专家系统等。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .box &#123; width:285px; height: 310px; border-bottom: 1px solid #c8dcf2; border-top: 1px solid #c8dcf2; &#125; .header &#123; width:285px; height: 40px; &#125; .header h3 &#123; margin:0px; font-family: 'Microsoft Yahei'; font-size: 16px; color: #172c45; line-height: 40px; float: left; &#125; .header a &#123; font-size: 12px; font-family: 'Microsoft Yahei'; color: #172c45; text-decoration: none; float: right; line-height: 40px; &#125; p &#123; font-size: 12px; font-family: 'Microsoft Yahei'; color: #737373; line-height: 20px; height:190px; width: 100%; &#125; img &#123; height:80px; width:100%; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box"&gt; &lt;div class="header"&gt; &lt;h3&gt;今日头条&lt;/h3&gt; &lt;a href="#"&gt;更多&amp;gt;&amp;gt;&lt;/a&gt; &lt;/div&gt; &lt;img src="./images/banner.jpg" alt="banner"&gt; &lt;p&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。人工智能是计算机科学的一个分支，它企图了解智能的实质，并生产出一种新的能以人类智能相似的方式做出反应的智能机器，该领域的研究包括机器人、语言识别、图像识别、自然语言处理和专家系统等。 &lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>前端 - css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>css选择器</tag>
        <tag>css浮动</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端技术的介绍]]></title>
    <url>%2F2016%2F07%2F19%2F2016-7-19-html%2F</url>
    <content type="text"><![CDATA[概述什么是前端前端即网站前台部分，运行在PC端，移动端等浏览器上展现给用户浏览的网页。随着互联网技术的发展，HTML5，CSS3，前端框架的应用，跨平台响应式网页设计能够适应各种屏幕分辨率，完美的动效设计，给用户带来极高的用户体验。 2. 前端三大块 这三个是前端开发中最基本也是最必须的三个技能。前端的开发中，在页面的布局时， HTML将元素进行定义，CSS对展示的元素进行定位，再通过JavaScript实现相应的效果和交互。虽然表面看起来很简单，但这里面需要掌握的东西绝对不会少。在进行开发前，需要对这些概念弄清楚、弄明白，这样在开发的过程中才会得心应手。 Html指的是超文本标记语言 (Hyper Text Markup Language)，这个也是我们网页最常用普通的语言了，经历了多个版本的发展，已经发展到5.0版了, 即HTML5。 Css级联样式表（Cascading Style Sheet）简称“CSS”，通常又称为“风格样式表（Style Sheet）”，它是用来进行网页风格设计的。比如，如果想让链接字未点击时是蓝色的，当鼠标移上去后字变成红色的且有下划线，这就是一种风格。通过设立样式表，可以统一地控制HTML中各标志的显示属性。级联样式表可以使人更能有效地控制网页外观。使用级联样式表，可以扩充精确指定网页元素位置，外观以及创建特殊效果的能力。 JavaScriptJavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[辨析 Sass 中的 Map 和 List]]></title>
    <url>%2F2016%2F07%2F12%2F2016-7-12-demo%2F</url>
    <content type="text"><![CDATA[概述如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。 自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。 那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 package.json 或者其他同类型的项目配置文件所控制，往往只需一条命令（gem update sass）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。 使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。 测试表格 Variable Description site Sitewide information. page Page specific information and custom variables set in front-matter. config Site configuration theme Theme configuration. Inherits from site configuration. _ (single underscore) Lodash library path Path of current page url Full URL of current page env Environment variables 语法比较 测试标题 在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 min-width、max-width、font-size 和 line-height 四个样式。 Map 语法下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。 1234567891011121314151617181920212223242526$breakpoint-map: ( small: ( min-width: null, max-width: 479px, base-font: 16px, vertical-rhythm: 1.3 ), medium: ( min-width: 480px, max-width: 959px, base-font: 18px, vertical-rhythm: 1.414 ), large: ( min-width: 960px, max-width: 1099px, base-font: 18px, vertical-rhythm: 1.5 ), xlarge: ( min-width: 1100px, max-width: null, base-font: 21px, vertical-rhythm: 1.618 )); 多重列表语法下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 nth() 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。 123456$breakpoint-list: ( (small, null, 479px, 16px, 1.3), (medium, 480px, 959px, 18px, 1.414), (large, 960px, 1099px, 18px, 1.5), (xlarge, 1100px, null, 21px, 1.618)); 遍历比较 测试标题 从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？ 遍历 Map我们可以使用如下的代码遍历 Map： 1@each $label, $map in $breakpoint-map &#123;&#125; 这里的变量 $label 和 $map 会随着对 $breakpoint-map 的遍历被动态地赋值，$label 将会被赋值为 $breakpoint-map 的 Key，而 $map 会被赋值为 $breakpoint-map 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 map-get() 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。 具体的做法就是使用 @each 遍历 Map，然后使用 map-get() 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历： 123456@each $label, $map in $breakpoint-map &#123; $min-width: map-get($map, min-width); $max-width: map-get($map, max-width); $base-font: map-get($map, base-font); $vertical-rhythm: map-get($map, vertical-rhythm);&#125; 遍历多重列表遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 map-get() 函数取特定值，直接遍历一遍即可获得特定值。 因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 map-get()，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符： 12@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;&#125; 慎用多重列表 测试标题 经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。 遗漏键值如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况： 1234567891011121314151617181920$breakpoint-list: ( (small, null, 479px, 16px, 1.3), (medium, 480px, 959px, 18px, 1.414), (large, 960px, 1099px, 18px, 1.5), (xlarge, 1100px, 21px, 1.618));p &#123; @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123; @if $min-width &#123; @include breakpoint( $min-width ) &#123; font-size: $base-font; line-height: $vertical-rhythm; &#125; &#125; @else &#123; font-size: $base-font; line-height: $vertical-rhythm; &#125; &#125;&#125; 当我们尝试运行这段代码时，结果肯定是错误地，因为在 $breakpoint-list 的最后一行，xlarge 被赋值给了 $label，1100px 被赋值给了 $min-width，21px 被赋值给了 $max-width, 1.618 被赋值给了 $base-font，最终导致 $vertical-rhythm 没有被赋值，结果就是 font-size 的属性值是错的，line-height 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。 如果我们使用 Map 来代替这里的多重列表，那么使用 map-get() 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。 查找特定列表在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 map-get() 函数可以快速定位到特定子 Map： 1$medium-map: map-get($maps, medium); 但如果要获取多种列表 medium 列表，麻烦可就大了： 123456789@function get-list($label) &#123; @each $list in $breakpoint-list &#123; @if nth($list, 1) == $label &#123; @return $list; &#125; &#125; @return null;&#125;$medium-list: get-list(medium); 这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 null。这实际上就是手工实现了 map-get() 的逻辑。 缺少原生的 Map 函数Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 map-merge() 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 join() 或 append() 来增加新列表，从而模拟出 map-merge() 的效果。 另一个实用的 Map 函数就是 map-has-key()，对于依赖 map-get() 的自定义函数来说，map-has-key() 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。 总结 Test Title 相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。 虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
